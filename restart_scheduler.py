# ========= –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ =========
import importlib
import schedule
import config
import auto_send_tasks_on_schedule
import datetime
from task_storage import assign_task
from send_planned_tasks import send_scheduled_tasks
from logger import log_error, log_bot_restart

# === –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ ===
def restart_scheduler(bot):
    importlib.reload(config)
    schedule.clear()

    # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    log_bot_restart()

    # üîÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
    if config.status_work_time == "on":
        for time_str in config.work_time:
            schedule.every().day.at(time_str).do(auto_send_tasks_on_schedule.send_control_panel_tasks, bot)

    # üîÅ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏
    if config.status_weekly == "on":
        for day, time_str in config.weekly_schedule:
            schedule_func = getattr(schedule.every(), day)
            schedule_func.at(time_str).do(send_weekly_tasks, bot)

    # üîÅ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –∑–∞–¥–∞—á–∏
    if config.status_monthly == "on":
        for day, time_str in config.monthly_schedule:
            # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
            schedule.every().day.at(time_str).do(check_and_send_monthly, bot, day)

    # ‚è∞ –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    schedule.every(1).minutes.do(send_scheduled_tasks, bot)


    print(f"‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!")
    print(f"üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ: {config.work_time if config.status_work_time == 'on' else '‚ùå'}")
    print(f"üóì –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ: {config.weekly_schedule if config.status_weekly == 'on' else '‚ùå'}")
    print(f"üìÜ –ï–∂–µ–º–µ—Å—è—á–Ω–æ: {config.monthly_schedule if config.status_monthly == 'on' else '‚ùå'}")

# === –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ –≥—Ä—É–ø–ø–∞–º ===
def send_weekly_tasks(bot):
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    sent_tasks = {}

    for group_name, performers in config.performers_by_group.items():
        task_text = config.weekly_tasks.get(group_name)
        if not task_text:
            continue
        for user_id in performers:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —ç—Ç—É –∑–∞–¥–∞—á—É
            if user_id in sent_tasks and sent_tasks[user_id] == task_text:
                continue

            try:
                msg = bot.send_message(user_id, f"üìå <b>–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞:</b>\n{task_text}", parse_mode="HTML")
                assign_task(user_id, task_text, msg.message_id)
                # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —ç—Ç—É –∑–∞–¥–∞—á—É
                sent_tasks[user_id] = task_text
            except Exception as e:
                error_msg = f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}"
                print(error_msg)
                log_error(e, f"–ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

# === –ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–Ω—è) ===
def check_and_send_monthly(bot, target_day):
    today = datetime.datetime.now().day
    if today == target_day:
        send_monthly_tasks(bot)

def send_monthly_tasks(bot):
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    sent_tasks = {}

    for group_name, performers in config.performers_by_group.items():
        task_text = config.monthly_tasks.get(group_name)
        if not task_text:
            continue
        for user_id in performers:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —ç—Ç—É –∑–∞–¥–∞—á—É
            if user_id in sent_tasks and sent_tasks[user_id] == task_text:
                continue

            try:
                msg = bot.send_message(user_id, f"üìå <b>–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –∑–∞–¥–∞—á–∞:</b>\n{task_text}", parse_mode="HTML")
                assign_task(user_id, task_text, msg.message_id)
                # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —ç—Ç—É –∑–∞–¥–∞—á—É
                sent_tasks[user_id] = task_text
            except Exception as e:
                error_msg = f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}"
                print(error_msg)
                log_error(e, f"–ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
