import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from telebot import types
import config  # –§–∞–π–ª —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
import help_message
import schedule
import time
import threading
import ast
import re
import hashlib
import importlib

from config import ADMIN_ID

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
bot = telebot.TeleBot(config.TOKEN)
# –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ —Å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ

# ========= –§—É–Ω–∫—Ü–∏—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è MarkdownV2 =========
def escape_markdown_v2(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2"""
    special_chars = r"\_*[]()~`>#+-=|{}.!"
    return "".join(f"\\{char}" if char in special_chars else char for char in text)

# ========= –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ =========
def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    return user_id in config.ADMIN_ID

# ========= –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã =========


# ========= –ö–æ–º–∞–Ω–¥–∞ /set_group_name =========
@bot.message_handler(commands=['set_group_name'])
def handle_set_group_name(message):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã."""
    if not is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø.")
        return

    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_set_group_name"),
        InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_set_group_name")
    )

    bot.send_message(
        message.chat.id,
        "–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã?",
        parse_mode="HTML",
        reply_markup=keyboard
    )

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤ –∏ –∏–º–µ–Ω –≥—Ä—É–ø–ø
group_index_map = {str(index): name for index, name in enumerate(config.performers.keys())}

@bot.callback_query_handler(func=lambda call: call.data == "cancel_set_group_name")
def cancel_set_group_name(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–∫–∞–∑ –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã."""
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
    bot.send_message(call.message.chat.id, "üö´ –°–º–µ–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã –æ—Ç–º–µ–Ω–µ–Ω–∞.")

@bot.callback_query_handler(func=lambda call: call.data == "confirm_set_group_name")
def process_set_group_name_choice(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∏–∑–º–µ–Ω—è—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –Ω–µ—Ç)."""
    if not is_admin(call.from_user.id):
        bot.answer_callback_query(call.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø.")
        return

    # –£–¥–∞–ª—è–µ–º inline-–∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)

    importlib.reload(config)  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ

    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã
    global group_index_map
    group_index_map = {str(index): name for index, name in enumerate(config.performers.keys())}

    keyboard = InlineKeyboardMarkup()
    for index, group_name in group_index_map.items():
        keyboard.add(InlineKeyboardButton(group_name, callback_data=f"select_group_to_rename|{index}"))

    keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_group_rename"))

    bot.send_message(
        call.message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É, —É –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è:",
        parse_mode="HTML",
        reply_markup=keyboard
    )

@bot.callback_query_handler(func=lambda call: call.data == "cancel_group_rename")
def cancel_group_rename(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã."""
    bot.edit_message_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã –æ—Ç–º–µ–Ω–µ–Ω–∞.", call.message.chat.id, call.message.message_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("select_group_to_rename"))
def select_group_to_rename(call):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –∏–º—è."""
    _, group_index = call.data.split("|")

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º
    importlib.reload(config)
    group_index_map = {str(index): name for index, name in enumerate(config.performers.keys())}

    old_group_name = group_index_map.get(group_index)

    if not old_group_name or old_group_name not in config.performers:
        bot.send_message(call.message.chat.id, "‚ö† –û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", parse_mode="HTML")
        return

    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)

    bot.send_message(
        call.message.chat.id,
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã <b>{old_group_name}</b>:",
        parse_mode="HTML"
    )

    bot.register_next_step_handler(call.message, process_new_group_name, old_group_name)

def process_new_group_name(message, old_group_name):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –≤ config.py."""
    chat_id = message.chat.id
    new_group_name = message.text.strip()

    if not new_group_name:
        bot.send_message(chat_id, "‚ö† –û—à–∏–±–∫–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /set_group_name.")
        return

    # –ß–∏—Ç–∞–µ–º config.py
    config_file = "config.py"
    with open(config_file, "r", encoding="utf-8") as file:
        config_content = file.readlines()

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å performers
    new_config_content = []
    group_updated = False

    for line in config_content:
        if line.strip().startswith("performers = {"):
            new_config_content.append(line)
            continue

        match = re.match(r"\s*'(.*?)':\s*(performers_list_\d+),", line)
        if match:
            current_group_name, group_var = match.groups()
            if current_group_name == old_group_name:
                new_config_content.append(f"    '{new_group_name}': {group_var},\n")
                group_updated = True
                continue

        new_config_content.append(line)

    if not group_updated:
        bot.send_message(chat_id, f"‚ö† –û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ <b>{old_group_name}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ config.py", parse_mode="HTML")
        return

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π config.py
    with open(config_file, "w", encoding="utf-8") as file:
        file.writelines(new_config_content)

    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º config.py
    importlib.reload(config)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    bot.send_message(
        chat_id,
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã <b>{old_group_name}</b> –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ <b>{new_group_name}</b>!",
        parse_mode="HTML"
    )

    # –í—ã–≤–æ–¥–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
    updated_groups = "\n".join([f"üîπ <b>{group}</b>" for group in config.performers.keys()])
    bot.send_message(
        chat_id,
        f"üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø:</b>\n{updated_groups}",
        parse_mode="HTML"
    )



# ========= –ö–æ–º–∞–Ω–¥–∞ /add_user =========
@bot.message_handler(commands=['add_user'])
def handle_add_user(message):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞."""
    if not is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")
        return

    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_add_user"),
        InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_add_user")
    )

    bot.send_message(
        message.chat.id,
        "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?",
        parse_mode="HTML",
        reply_markup=keyboard
    )


@bot.callback_query_handler(func=lambda call: call.data in ["confirm_add_user", "cancel_add_user"])
def process_add_user_choice(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–¥–æ–±–∞–≤–ª—è—Ç—å –∏–ª–∏ –Ω–µ—Ç)."""
    if not is_admin(call.from_user.id):
        bot.answer_callback_query(call.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∏–∑–º–µ–Ω—è—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")
        return

    if call.data == "cancel_add_user":
        bot.edit_message_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", call.message.chat.id, call.message.message_id)
        return

    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º config –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∫–Ω–æ–ø–æ–∫
    importlib.reload(config)

    keyboard = InlineKeyboardMarkup()
    group_index_map = {str(index): group for index, group in enumerate(config.performers.keys())}

    for index, group_name in group_index_map.items():
        keyboard.add(InlineKeyboardButton(group_name[:30], callback_data=f"select_group_{index}"))

    bot.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É, –≤ –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=keyboard
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –∏ –Ω–∞–∑–≤–∞–Ω–∏–π –≥—Ä—É–ø–ø
    task_data[call.message.chat.id] = {"group_index_map": group_index_map}


@bot.callback_query_handler(func=lambda call: call.data.startswith("select_group_"))
def select_group(call):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç ID –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã."""
    chat_id = call.message.chat.id
    group_index = call.data.split("_")[2]

    if chat_id not in task_data or "group_index_map" not in task_data[chat_id]:
        bot.send_message(chat_id, "‚ö† –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_user.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ –∏–Ω–¥–µ–∫—Å—É
    group_name = task_data[chat_id]["group_index_map"].get(group_index)

    if not group_name:
        bot.send_message(chat_id, "‚ö† –û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
    task_data[chat_id]["selected_group"] = group_name

    bot.edit_message_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É <b>{group_name}</b>\n\n–£–∫–∞–∂–∏—Ç–µ ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:",
        chat_id,
        call.message.message_id,
        parse_mode="HTML"
    )

    bot.register_next_step_handler_by_chat_id(chat_id, process_new_user_id)


def process_new_user_id(message):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ config.py."""
    chat_id = message.chat.id

    if chat_id not in task_data or "selected_group" not in task_data[chat_id]:
        bot.send_message(chat_id, "‚ö† –û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_user.")
        return

    try:
        new_user_id = int(message.text.strip())
    except ValueError:
        bot.send_message(chat_id, "‚ö† –û—à–∏–±–∫–∞: ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", parse_mode="HTML")
        return

    group_name = task_data[chat_id]["selected_group"]

    # –ß–∏—Ç–∞–µ–º config.py
    config_file = "config.py"
    with open(config_file, "r", encoding="utf-8") as file:
        config_content = file.readlines()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å –∫–æ—Ä—Ç–µ–∂–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    group_var_name = None
    for var_name in config.performers.keys():
        if var_name == group_name:
            group_var_name = f"performers_list_{list(config.performers.keys()).index(var_name) + 1}"
            break

    if not group_var_name:
        bot.send_message(chat_id, f"‚ö† –û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ <b>{group_name}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ config.py", parse_mode="HTML")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    new_config_content = []
    group_updated = False

    for line in config_content:
        if line.strip().startswith(f"{group_var_name} ="):
            match = re.search(r"\((.*?)\)", line)
            if match:
                existing_ids = match.group(1).strip()
                existing_ids_list = [int(x.strip()) for x in existing_ids.split(",") if x.strip().isdigit()]
            else:
                existing_ids_list = []

            if new_user_id in existing_ids_list:
                bot.send_message(chat_id, f"‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <b>{new_user_id}</b> —É–∂–µ –≤ –≥—Ä—É–ø–ø–µ {group_name}.", parse_mode="HTML")
                return

            existing_ids_list.append(new_user_id)
            updated_ids = ", ".join(map(str, existing_ids_list))

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ñ–∞–π–ª–µ
            new_config_content.append(f"{group_var_name} = ({updated_ids},)\n")
            group_updated = True
        else:
            new_config_content.append(line)

    if not group_updated:
        bot.send_message(chat_id, f"‚ö† –û—à–∏–±–∫–∞: —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã <b>{group_name}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ config.py", parse_mode="HTML")
        return

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π config.py
    with open(config_file, "w", encoding="utf-8") as file:
        file.writelines(new_config_content)

    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º config.py
    importlib.reload(config)

    bot.send_message(
        chat_id,
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <b>{new_user_id}</b> –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É <b>{group_name}</b>!",
        parse_mode="HTML"
    )

    del task_data[chat_id]



# ========= –ö–æ–º–∞–Ω–¥–∞ /delete_user =========
@bot.message_handler(commands=['delete_user'])
def handle_delete_user(message):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞."""
    if not is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —É–¥–∞–ª—è—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")
        return

    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_delete_user"),
        InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_delete_user")
    )

    bot.send_message(
        message.chat.id,
        "–•–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?",
        reply_markup=keyboard
    )


@bot.callback_query_handler(func=lambda call: call.data in ["confirm_delete_user", "cancel_delete_user"])
def process_delete_user_choice(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    if not is_admin(call.from_user.id):
        bot.answer_callback_query(call.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —É–¥–∞–ª—è—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")
        return

    if call.data == "cancel_delete_user":
        bot.edit_message_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", call.message.chat.id, call.message.message_id)
        return

    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º config –ø–µ—Ä–µ–¥ –≤—ã–≤–æ–¥–æ–º —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø
    importlib.reload(config)

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å –≤–º–µ—Å—Ç–æ –¥–ª–∏–Ω–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã
    group_index_map = {str(index): name for index, name in enumerate(config.performers.keys())}

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –∏ –∏–º–µ–Ω –≥—Ä—É–ø–ø (–≥–ª–æ–±–∞–ª—å–Ω–æ)
    task_data[call.message.chat.id] = {"group_index_map": group_index_map}

    keyboard = InlineKeyboardMarkup()
    for index, group_name in group_index_map.items():
        keyboard.add(InlineKeyboardButton(group_name[:30], callback_data=f"delete_group_{index}"))

    bot.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É, –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=keyboard
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_group_"))
def select_group_to_delete(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞."""
    chat_id = call.message.chat.id
    group_index = call.data.split("_")[2]

    if chat_id not in task_data or "group_index_map" not in task_data[chat_id]:
        bot.send_message(chat_id, "‚ö† –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /delete_user.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ –∏–Ω–¥–µ–∫—Å—É
    group_name = task_data[chat_id]["group_index_map"].get(group_index)

    if not group_name:
        bot.send_message(chat_id, "‚ö† –û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
    task_data[chat_id]["selected_group"] = group_name

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    employee_list = config.performers[group_name]
    if not employee_list:
        bot.send_message(chat_id, f"‚ö† –í –≥—Ä—É–ø–ø–µ <b>{group_name}</b> –Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.", parse_mode="HTML")
        return

    keyboard = InlineKeyboardMarkup()
    for user_id in employee_list:
        try:
            user = bot.get_chat(user_id)
            username = f"@{user.username}" if user.username else "–ë–µ–∑ username"
            first_name = user.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
            display_text = f"üë§ {first_name} ({username})"
        except telebot.apihelper.ApiTelegramException:
            display_text = f"‚ùå ID: {user_id} (–Ω–µ –Ω–∞–π–¥–µ–Ω)"

        keyboard.add(InlineKeyboardButton(display_text, callback_data=f"delete_user_{user_id}"))

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "‚ùå –û—Ç–º–µ–Ω–∞"
    keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete_employee"))

    bot.edit_message_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ <b>{group_name}</b>:",
        chat_id,
        call.message.message_id,
        parse_mode="HTML",
        reply_markup=keyboard
    )


@bot.callback_query_handler(func=lambda call: call.data == "cancel_delete_employee")
def cancel_delete_employee(call):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤—ã–±–æ—Ä—É –≥—Ä—É–ø–ø—ã."""
    chat_id = call.message.chat.id

    if chat_id not in task_data or "group_index_map" not in task_data[chat_id]:
        bot.send_message(chat_id, "‚ö† –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /delete_user.")
        return

    group_index_map = task_data[chat_id]["group_index_map"]

    keyboard = InlineKeyboardMarkup()
    for index, group_name in group_index_map.items():
        keyboard.add(InlineKeyboardButton(group_name[:30], callback_data=f"delete_group_{index}"))

    bot.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É, –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:",
        chat_id,
        call.message.message_id,
        reply_markup=keyboard
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_user_"))
def delete_employee(call):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ –≥—Ä—É–ø–ø—ã."""
    chat_id = call.message.chat.id
    user_id = int(call.data.split("_")[2])

    if chat_id not in task_data or "selected_group" not in task_data[chat_id]:
        bot.send_message(chat_id, "‚ö† –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /delete_user.")
        return

    group_name = task_data[chat_id]["selected_group"]

    if group_name not in config.performers:
        bot.send_message(chat_id, "‚ö† –û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –£–±–∏—Ä–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏
    bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=None)

    # –ß–∏—Ç–∞–µ–º config.py
    config_file = "config.py"
    with open(config_file, "r", encoding="utf-8") as file:
        config_content = file.readlines()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏
    group_var_name = None
    for var_name, users in config.performers.items():
        if var_name == group_name:
            group_var_name = f"performers_list_{list(config.performers.keys()).index(var_name) + 1}"
            break

    if not group_var_name:
        bot.send_message(chat_id, f"‚ö† –û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ <b>{group_name}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ config.py", parse_mode="HTML")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    new_config_content = []
    group_updated = False

    for line in config_content:
        if line.strip().startswith(f"{group_var_name} ="):
            match = re.search(r"\((.*?)\)", line)
            if match:
                existing_ids = match.group(1).strip()
                existing_ids_list = [int(x.strip()) for x in existing_ids.split(",") if x.strip().isdigit()]
            else:
                existing_ids_list = []

            if user_id not in existing_ids_list:
                bot.send_message(chat_id, f"‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <b>{user_id}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥—Ä—É–ø–ø–µ {group_name}.", parse_mode="HTML")
                return

            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            existing_ids_list.remove(user_id)
            updated_ids = ", ".join(map(str, existing_ids_list))

            new_config_content.append(f"{group_var_name} = ({updated_ids},)\n" if updated_ids else f"{group_var_name} = ()\n")

            group_updated = True
        else:
            new_config_content.append(line)

    if not group_updated:
        bot.send_message(chat_id, f"‚ö† –û—à–∏–±–∫–∞: —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã <b>{group_name}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ config.py", parse_mode="HTML")
        return

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π config.py
    with open(config_file, "w", encoding="utf-8") as file:
        file.writelines(new_config_content)

    importlib.reload(config)

    bot.send_message(
        chat_id,
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <b>{user_id}</b> —É–¥–∞–ª–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã <b>{group_name}</b>!",
        parse_mode="HTML"
    )

    del task_data[chat_id]




# ========= –ö–æ–º–∞–Ω–¥–∞ /set_tasks_group =========
@bot.message_handler(commands=['set_tasks_group'])
def handle_set_tasks_group(message):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø."""
    if message.from_user.id not in config.ADMIN_ID:
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∏–∑–º–µ–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø.")
        return

    importlib.reload(config)  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ

    global task_data
    task_data = {}  # –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã

    keyboard = InlineKeyboardMarkup()
    global group_name_map
    group_name_map = {}

    response = "<b>–¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø:</b>\n\n"

    for group_name, performers_list in config.performers.items():
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –≤ —Å—Ç—Ä–æ–∫—É, —á—Ç–æ–±—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∫–ª—é—á–∞–º –≤ control_panel_for_set_tasks_group
        performers_key = f"performers_list_{list(config.performers.keys()).index(group_name) + 1}"
        correct_task = config.control_panel_for_set_tasks_group.get(performers_key, "‚ùå –ù–µ—Ç –∑–∞–¥–∞–Ω–∏—è")

        response += f"üîπ <b>{group_name}:</b>\n<pre>{correct_task.strip()}</pre>\n\n"

        group_hash = hashlib.md5(group_name.encode()).hexdigest()[:8]
        group_name_map[group_hash] = group_name  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ

        callback_data = f"edit_task|{message.chat.id}|{group_hash}"
        keyboard.add(InlineKeyboardButton(group_name[:30], callback_data=callback_data))

    keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_set_tasks_group|{message.chat.id}"))

    bot.send_message(
        message.chat.id,
        response + "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ:",
        parse_mode="HTML",
        reply_markup=keyboard
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_task"))
def edit_task(call):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã."""
    _, chat_id, group_hash = call.data.split("|")
    chat_id = int(chat_id)

    if group_hash not in group_name_map:
        bot.answer_callback_query(call.id, "‚ö† –û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    group_name = group_name_map[group_hash]

    task_data[chat_id] = {"selected_group": group_name}

    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)

    bot.send_message(chat_id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã <b>{group_name}</b>:", parse_mode="HTML")
    bot.register_next_step_handler_by_chat_id(chat_id, update_task_text)

@bot.callback_query_handler(func=lambda call: call.data.startswith("cancel_set_tasks_group"))
def cancel_set_tasks_group(call):
    """–û—Ç–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –≥—Ä—É–ø–ø."""
    chat_id = int(call.data.split("|")[1])

    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
    bot.send_message(chat_id, "üö´ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

def update_task_text(message):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –≤ config.py –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ control_panel_for_set_tasks_group."""
    chat_id = message.chat.id

    if chat_id not in task_data or "selected_group" not in task_data[chat_id]:
        bot.send_message(chat_id, "‚ö† –û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /set_tasks_group.")
        return

    new_task_text = message.text.strip()
    group_name = task_data[chat_id]["selected_group"]

    config_file = "config.py"
    with open(config_file, "r", encoding="utf-8") as file:
        config_content = file.readlines()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∑–∞–¥–∞–Ω–∏—è
    group_index = list(config.performers.keys()).index(group_name) + 1
    task_var_name = f"task_group_{group_index}"
    performers_key = f"performers_list_{group_index}"

    # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    new_config_content = []
    inside_task_block = False
    task_updated = False

    for line in config_content:
        if line.strip().startswith(f"{task_var_name} = '''") or line.strip().startswith(f'{task_var_name} = """'):
            # –ù–∞–π–¥–µ–Ω —Å—Ç–∞—Ä—ã–π –±–ª–æ–∫ –∑–∞–¥–∞—á–∏ ‚Äî –∑–∞–º–µ–Ω—è–µ–º –µ–≥–æ
            new_config_content.append(f"{task_var_name} = '''\n{new_task_text}\n'''\n")
            inside_task_block = True
            task_updated = True
            continue

        if inside_task_block:
            if line.strip().endswith("'''") or line.strip().endswith('"""'):
                inside_task_block = False  # –ö–æ–Ω–µ—Ü —Å—Ç–∞—Ä–æ–≥–æ –±–ª–æ–∫–∞ –∑–∞–¥–∞—á–∏
            continue  # –ù–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å—Ç—Ä–æ–∫–∏ –∑–∞–¥–∞—á–∏

        new_config_content.append(line)  # –û—Å—Ç–∞–≤–ª—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

    if not task_updated:
        bot.send_message(chat_id, f"‚ö† –û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è {task_var_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ config.py")
        return

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π config.py
    with open(config_file, "w", encoding="utf-8") as file:
        file.writelines(new_config_content)

    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º config.py, —á—Ç–æ–±—ã –±–æ—Ç —Å—Ä–∞–∑—É –≤–∏–¥–µ–ª –∏–∑–º–µ–Ω–µ–Ω–∏—è
    importlib.reload(config)

    # –û–±–Ω–æ–≤–ª—è–µ–º `control_panel_for_set_tasks_group`
    config.control_panel_for_set_tasks_group[performers_key] = new_task_text

    bot.send_message(
        chat_id,
        f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã <b>{group_name}</b> —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
        parse_mode="HTML"
    )

    del task_data[chat_id]

# ========= –ö–æ–º–∞–Ω–¥–∞ /group_task =========
@bot.message_handler(commands=['group_task'])
def handle_group_task(message):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏."""
    if not is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á–∏.")
        return

    bot.send_message(message.chat.id, "‚úè –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞):")
    bot.register_next_step_handler(message, process_group_task_text)


def process_group_task_text(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤."""
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        bot.send_message(message.chat.id, "üö´ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return

    task_text = message.text.strip()
    chat_id = message.chat.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–¥–∞—á–µ
    task_data[chat_id] = {"task_text": task_text, "selected_groups": []}

    send_group_selection(chat_id)


def hash_group_name(group_name):
    """–°–æ–∑–¥–∞—ë—Ç –∫–æ—Ä–æ—Ç–∫–∏–π —Ö–µ—à –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ callback_data."""
    return hashlib.md5(group_name.encode()).hexdigest()[:8]  # 8 —Å–∏–º–≤–æ–ª–æ–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏

group_name_map = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ö–µ—à–∞ –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è

def send_group_selection(chat_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –¥–ª—è –≤—ã–±–æ—Ä–∞."""
    importlib.reload(config)  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ

    selected_groups = task_data[chat_id]["selected_groups"]
    available_groups = [group for group in config.performers.keys() if group not in selected_groups]

    keyboard = InlineKeyboardMarkup()

    if not available_groups:
        bot.send_message(
            chat_id,
            "–ë–æ–ª—å—à–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø",
            parse_mode="HTML"
        )
        send_selected_groups(chat_id)
        return

    for group_name in available_groups:
        group_hash = hash_group_name(group_name)
        group_name_map[group_hash] = group_name  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
        callback_data = f"group_task_select|{chat_id}|{group_hash}"
        keyboard.add(InlineKeyboardButton(group_name, callback_data=callback_data))

    keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"group_task_cancel|{chat_id}"))

    bot.send_message(
        chat_id,
        "–ö–æ–º—É –Ω—É–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É?",
        parse_mode="HTML",
        reply_markup=keyboard
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("group_task_select"))
def select_group(call):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –≥—Ä—É–ø–ø—É –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –µ—â–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å."""
    _, chat_id, group_hash = call.data.split("|")
    chat_id = int(chat_id)

    if chat_id not in task_data:
        bot.answer_callback_query(call.id, "‚ö† –û—à–∏–±–∫–∞: –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    group_name = group_name_map.get(group_hash)
    if not group_name:
        bot.answer_callback_query(call.id, "‚ö† –û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    if group_name not in task_data[chat_id]["selected_groups"]:
        task_data[chat_id]["selected_groups"].append(group_name)

    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
    send_selected_groups(chat_id)


def send_selected_groups(chat_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –≥—Ä—É–ø–ø–∞–º–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å."""
    selected_groups = task_data[chat_id]["selected_groups"]
    selected_text = "\n".join([f"‚úÖ <b>{group}</b>" for group in selected_groups])

    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", callback_data=f"group_task_add_more|{chat_id}"),
        InlineKeyboardButton("üì® –û–¢–ü–†–ê–í–ò–¢–¨", callback_data=f"group_task_send|{chat_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"group_task_cancel|{chat_id}")
    )

    bot.send_message(
        chat_id,
        f"–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω—É –≥—Ä—É–ø–ø—É –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É?\n\n<b>–í—ã–±—Ä–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã:</b>\n{selected_text}",
        parse_mode="HTML",
        reply_markup=keyboard
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("group_task_add_more"))
def add_more_groups(call):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å –µ—â—ë –≥—Ä—É–ø–ø—ã."""
    chat_id = int(call.data.split("|")[1])
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
    send_group_selection(chat_id)


@bot.callback_query_handler(func=lambda call: call.data.startswith("group_task_send"))
def send_group_task(call):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≥—Ä—É–ø–ø–∞–º."""
    chat_id = int(call.data.split("|")[1])

    if chat_id not in task_data or not task_data[chat_id]["selected_groups"]:
        bot.answer_callback_query(call.id, "‚ö† –û—à–∏–±–∫–∞: –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø.")
        return

    task_text = task_data[chat_id]["task_text"]
    group_names = task_data[chat_id]["selected_groups"]
    user_ids = []

    for group_name in group_names:
        user_ids.extend(config.performers.get(group_name, []))

    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)

    for user_id in user_ids:
        try:
            bot.send_message(user_id, f"üìå <b>–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ:</b>\n{task_text}", parse_mode="HTML")
            bot.send_message(user_id, "üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.")
            task_data[user_id] = {"task_text": task_text}
        except telebot.apihelper.ApiTelegramException as e:
            print(f"‚ö† –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    bot.send_message(chat_id, "‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø!")
    del task_data[chat_id]


@bot.callback_query_handler(func=lambda call: call.data.startswith("group_task_cancel"))
def cancel_task(call):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏."""
    chat_id = int(call.data.split("|")[1])
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
    bot.send_message(chat_id, "üö´ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    if chat_id in task_data:
        del task_data[chat_id]


# ========= –ö–æ–º–∞–Ω–¥–∞ /user_task =========
@bot.message_handler(commands=['user_task'])
def handle_user_task(message):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏."""
    if not is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á–∏.")
        return

    bot.send_message(message.chat.id, "‚úè –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞):")
    bot.register_next_step_handler(message, process_user_task_text)


def process_user_task_text(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤."""
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        bot.send_message(message.chat.id, "üö´ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return

    task_text = message.text.strip()
    chat_id = message.chat.id

    task_data[chat_id] = {"task_text": task_text, "selected_users": []}

    send_employee_selection(message.chat.id)


def send_employee_selection(chat_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞."""
    importlib.reload(config)  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ

    selected_users = task_data[chat_id]["selected_users"]
    available_users = []

    keyboard = InlineKeyboardMarkup()
    for group_name, users in config.performers.items():
        for user_id in users:
            if user_id in selected_users:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö

            try:
                user = bot.get_chat(user_id)
                username = f"@{user.username}" if user.username else "–ë–µ–∑ username"
                first_name = user.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
                callback_data = f"select_employee|{chat_id}|{user_id}"
                keyboard.add(InlineKeyboardButton(f"{first_name} ({username})", callback_data=callback_data))
                available_users.append(f"üë§ {first_name} ({username}) - {user_id}")
            except telebot.apihelper.ApiTelegramException:
                continue

    # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å—Ä–∞–∑—É –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
    if not available_users:
        bot.send_message(
            chat_id,
            "–ë–æ–ª—å—à–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
            parse_mode="HTML"
        )
        send_selected_users(chat_id)
        return

    keyboard.add(
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_task|{chat_id}")
    )

    bot.send_message(
        chat_id,
        "–ö–æ–º—É –Ω—É–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É?",
        parse_mode="HTML",
        reply_markup=keyboard
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("select_employee"))
def select_employee(call):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –∑–∞–¥–∞—á–∏."""
    _, chat_id, user_id = call.data.split("|")
    chat_id, user_id = int(chat_id), int(user_id)

    if chat_id not in task_data:
        bot.answer_callback_query(call.id, "‚ö† –û—à–∏–±–∫–∞: –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    if user_id not in task_data[chat_id]["selected_users"]:
        task_data[chat_id]["selected_users"].append(user_id)

    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)

    send_selected_users(chat_id)


def send_selected_users(chat_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å."""
    selected_users = task_data[chat_id]["selected_users"]
    selected_text = ""

    for user_id in selected_users:
        try:
            user = bot.get_chat(user_id)
            username = f"(@{user.username})" if user.username else ""
            first_name = user.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
            selected_text += f"‚úÖ {first_name} {username} - <code>{user_id}</code>\n"
        except telebot.apihelper.ApiTelegramException:
            selected_text += f"‚úÖ <code>{user_id}</code> (–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö)\n"

    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", callback_data=f"add_more_users|{chat_id}"),
        InlineKeyboardButton("üì® –û–¢–ü–†–ê–í–ò–¢–¨", callback_data=f"send_task|{chat_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_task|{chat_id}")
    )

    bot.send_message(
        chat_id,
        f"–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É?\n\n<b>–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏:</b>\n{selected_text}",
        parse_mode="HTML",
        reply_markup=keyboard
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("add_more_users"))
def add_more_users(call):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å –µ—â—ë —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤."""
    chat_id = int(call.data.split("|")[1])
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
    send_employee_selection(chat_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("send_task"))
def send_task(call):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º."""
    chat_id = int(call.data.split("|")[1])

    if chat_id not in task_data or not task_data[chat_id]["selected_users"]:
        bot.answer_callback_query(call.id, "‚ö† –û—à–∏–±–∫–∞: –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")
        return

    task_text = task_data[chat_id]["task_text"]
    user_ids = task_data[chat_id]["selected_users"]

    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)

    for user_id in user_ids:
        try:
            bot.send_message(user_id, f"üìå <b>–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ:</b>\n{task_text}", parse_mode="HTML")
            bot.send_message(user_id, "üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.")
            task_data[user_id] = {"task_text": task_text}
        except telebot.apihelper.ApiTelegramException as e:
            print(f"‚ö† –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    bot.send_message(chat_id, "‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º!")
    del task_data[chat_id]


@bot.callback_query_handler(func=lambda call: call.data.startswith("cancel_task"))
def cancel_task(call):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏."""
    chat_id = int(call.data.split("|")[1])
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
    bot.send_message(chat_id, "üö´ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    if chat_id in task_data:
        del task_data[chat_id]


# ========= –ö–æ–º–∞–Ω–¥–∞ /delete_admin =========
@bot.message_handler(commands=['delete_admin'])
def handle_delete_admin(message):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    if not is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_delete_admin"),
        InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_delete_admin")
    )

    bot.send_message(message.chat.id, "–•–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞?", reply_markup=keyboard)

# ========= –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ "–î–∞" / "–ù–µ—Ç" =========
@bot.callback_query_handler(func=lambda call: call.data in ["confirm_delete_admin", "cancel_delete_admin"])
def process_delete_admin_choice(call):
    if not is_admin(call.from_user.id):
        bot.answer_callback_query(call.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∏–∑–º–µ–Ω—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    if call.data == "confirm_delete_admin":
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)

        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º config.py –ø–µ—Ä–µ–¥ –≤—ã–≤–æ–¥–æ–º —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        importlib.reload(config)

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        keyboard = InlineKeyboardMarkup()
        admin_list = []

        for admin_id in config.ADMIN_ID:
            if admin_id == call.from_user.id:
                continue  # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å —Å–∞–º —Å–µ–±—è!

            try:
                user = bot.get_chat(admin_id)
                username = f"@{user.username}" if user.username else "–ë–µ–∑ username"
                first_name = user.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
                display_text = f"üë§ {first_name} ({username}) - {admin_id}"
            except telebot.apihelper.ApiTelegramException:
                display_text = f"‚ùå ID: {admin_id} (–Ω–µ –Ω–∞–π–¥–µ–Ω)"

            admin_list.append(display_text)
            keyboard.add(InlineKeyboardButton(display_text, callback_data=f"delete_admin_{admin_id}"))

        if not admin_list:
            bot.send_message(call.message.chat.id, "‚ö† –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", parse_mode="HTML")
            return

        bot.send_message(
            call.message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n" + "\n".join(admin_list),
            parse_mode="HTML",
            reply_markup=keyboard
        )

    elif call.data == "cancel_delete_admin":
        bot.edit_message_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", call.message.chat.id, call.message.message_id)

# ========= –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ config.py =========
@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_admin_"))
def process_admin_deletion(call):
    if not is_admin(call.from_user.id):
        bot.answer_callback_query(call.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∏–∑–º–µ–Ω—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    try:
        admin_id_to_delete = int(call.data.split("_")[2])
    except ValueError:
        bot.send_message(call.message.chat.id, "‚ö† –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", parse_mode="HTML")
        return

    if admin_id_to_delete == call.from_user.id:
        bot.send_message(call.message.chat.id, "‚õî –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–∞–º–∏ —Å–µ–±—è!", parse_mode="HTML")
        return

    # –£–¥–∞–ª—è–µ–º inline-–∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)

    # –ß–∏—Ç–∞–µ–º config.py
    config_file = "config.py"
    with open(config_file, "r", encoding="utf-8") as file:
        config_content = file.readlines()

    # –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ ADMIN_ID
    for i, line in enumerate(config_content):
        if line.strip().startswith("ADMIN_ID"):
            match = re.search(r"\[(.*?)\]", line)
            if match:
                existing_ids = match.group(1).strip()
                existing_ids_list = [int(x.strip()) for x in existing_ids.split(",") if x.strip().isdigit()]
            else:
                existing_ids_list = []

            if admin_id_to_delete not in existing_ids_list:
                bot.send_message(call.message.chat.id, f"‚ö† –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å ID {admin_id_to_delete} –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode="HTML")
                return

            # –£–¥–∞–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
            existing_ids_list.remove(admin_id_to_delete)
            updated_ids = ", ".join(map(str, existing_ids_list))

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ñ–∞–π–ª–µ
            config_content[i] = f"ADMIN_ID = [{updated_ids}]\n"
            break
    else:
        bot.send_message(call.message.chat.id, "‚ö† –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ config.py", parse_mode="HTML")
        return

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π config.py
    with open(config_file, "w", encoding="utf-8") as file:
        file.writelines(config_content)

    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º config.py, —á—Ç–æ–±—ã –±–æ—Ç —Å—Ä–∞–∑—É –≤–∏–¥–µ–ª –∏–∑–º–µ–Ω–µ–Ω–∏—è
    importlib.reload(config)

    bot.send_message(
        call.message.chat.id,
        f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å ID <code>{admin_id_to_delete}</code> —É–¥–∞–ª–µ–Ω.",
        parse_mode="HTML"
    )

# ========= –ö–æ–º–∞–Ω–¥–∞ /add_admin =========
@bot.message_handler(commands=['add_admin'])
def handle_add_admin(message):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    if not is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º config.py –ø–µ—Ä–µ–¥ –≤—ã–≤–æ–¥–æ–º —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    importlib.reload(config)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    admin_list = []
    for admin_id in config.ADMIN_ID:
        try:
            user = bot.get_chat(admin_id)
            username = f"@{user.username}" if user.username else f"ID: {admin_id}"
        except telebot.apihelper.ApiTelegramException:
            username = f"ID: {admin_id} (‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω)"

        admin_list.append(f"üë§ {username}")

    admin_text = "\n".join(admin_list) if admin_list else "‚ùå –ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."

    # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_add_admin"),
        InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_add_admin")
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π
    bot.send_message(
        message.chat.id,
        f"üîπ <b>–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:</b>\n{admin_text}\n\n"
        "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞?",
        parse_mode="HTML",
        reply_markup=keyboard
    )

# ========= –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ "–î–∞" / "–ù–µ—Ç" =========
@bot.callback_query_handler(func=lambda call: call.data in ["confirm_add_admin", "cancel_add_admin"])
def process_add_admin_choice(call):
    if not is_admin(call.from_user.id):
        bot.answer_callback_query(call.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∏–∑–º–µ–Ω—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    if call.data == "confirm_add_admin":
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
        bot.send_message(call.message.chat.id, "‚úè –£–∫–∞–∂–∏—Ç–µ ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
        bot.register_next_step_handler(call.message, process_admin_id)

    elif call.data == "cancel_add_admin":
        bot.edit_message_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", call.message.chat.id, call.message.message_id)


# ========= –û–±—Ä–∞–±–æ—Ç–∫–∞ ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ =========
def process_admin_id(message):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —Å–ø–∏—Å–æ–∫ `ADMIN_ID` –≤ `config.py`."""
    if not is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∏–∑–º–µ–Ω—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    try:
        new_admin_id = int(message.text.strip())  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ int
    except ValueError:
        bot.send_message(message.chat.id, "‚ö† –û—à–∏–±–∫–∞: ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π /add_admin.")
        return

    # –ß–∏—Ç–∞–µ–º config.py
    config_file = "config.py"
    with open(config_file, "r", encoding="utf-8") as file:
        config_content = file.readlines()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –∞–¥–º–∏–Ω –≤ —Å–ø–∏—Å–∫–µ
    if new_admin_id in config.ADMIN_ID:
        bot.send_message(
            message.chat.id,
            f"‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <code>{new_admin_id}</code> —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            parse_mode="HTML"
        )
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º `ADMIN_ID`
    for i, line in enumerate(config_content):
        if line.strip().startswith("ADMIN_ID"):
            match = re.search(r"\[(.*?)\]", line)
            if match:
                existing_ids = match.group(1).strip()
                existing_ids_list = [int(x.strip()) for x in existing_ids.split(",") if x.strip().isdigit()]
            else:
                existing_ids_list = []

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            existing_ids_list.append(new_admin_id)
            updated_ids = ", ".join(map(str, existing_ids_list))

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ñ–∞–π–ª–µ
            config_content[i] = f"ADMIN_ID = [{updated_ids}]\n"
            break
    else:
        bot.send_message(message.chat.id, "‚ö† –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ config.py", parse_mode="HTML")
        return

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π config.py
    with open(config_file, "w", encoding="utf-8") as file:
        file.writelines(config_content)

    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º config.py, —á—Ç–æ–±—ã –±–æ—Ç —Å—Ä–∞–∑—É –≤–∏–¥–µ–ª –∏–∑–º–µ–Ω–µ–Ω–∏—è
    importlib.reload(config)

    bot.send_message(
        message.chat.id,
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <code>{new_admin_id}</code> –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.",
        parse_mode="HTML"
    )


# ========= –ö–æ–º–∞–Ω–¥–∞ /auto_send =========
@bot.message_handler(commands=['auto_send'])
def handle_auto_send(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –∑–∞–¥–∞—á –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ."""
    if not is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∏–∑–º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º config.py –ø–µ—Ä–µ–¥ –≤—ã–≤–æ–¥–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    importlib.reload(config)

    current_status = "‚úÖ –í–∫–ª—é—á–µ–Ω–∞" if config.status_work_time == "on" else "‚õî –í—ã–∫–ª—é—á–µ–Ω–∞"
    schedule_list = "\n".join(config.work_time)

    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("‚úÖ –î–∞", callback_data="change_auto_send"),
        InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_auto_send")
    )

    bot.send_message(
        message.chat.id,
        f"üìÖ *–¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:*\n{schedule_list}\n\n"
        f"üîÑ *–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:* {current_status}\n\n"
        f"–ñ–µ–ª–∞–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏?",
        parse_mode="Markdown",
        reply_markup=keyboard
    )


# ========= –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π "–î–∞" / "–ù–µ—Ç" =========
@bot.callback_query_handler(func=lambda call: call.data in ["change_auto_send", "cancel_auto_send"])
def process_auto_send_change(call):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏."""
    if not is_admin(call.from_user.id):
        bot.answer_callback_query(call.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∏–∑–º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    if call.data == "cancel_auto_send":
        bot.edit_message_text("‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", call.message.chat.id, call.message.message_id)
        return

    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º config.py –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º
    importlib.reload(config)

    new_status = "off" if config.status_work_time == "on" else "on"

    # –ß–∏—Ç–∞–µ–º config.py
    config_file = "config.py"
    with open(config_file, "r", encoding="utf-8") as file:
        config_content = file.readlines()

    # –û–±–Ω–æ–≤–ª—è–µ–º `status_work_time`
    for i, line in enumerate(config_content):
        if line.strip().startswith("status_work_time"):
            config_content[i] = f"status_work_time = '{new_status}'\n"
            break

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π config.py
    with open(config_file, "w", encoding="utf-8") as file:
        file.writelines(config_content)

    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º config.py –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    importlib.reload(config)

    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–∞—Å—Å—ã–ª–∫—É
    restart_scheduler()

    new_status_text = "‚úÖ –í–∫–ª—é—á–µ–Ω–∞" if new_status == "on" else "‚õî –í—ã–∫–ª—é—á–µ–Ω–∞"
    bot.edit_message_text(f"üîÑ –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏: {new_status_text}",
                          call.message.chat.id, call.message.message_id)


# ========= –ö–æ–º–∞–Ω–¥–∞ /set_time =========
@bot.message_handler(commands=['set_time'])
def handle_set_time(message):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞–Ω–∏–π."""
    if not is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∏–∑–º–µ–Ω—è—Ç—å –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞–Ω–∏–π.")
        return

    # –í—ã–≤–æ–¥ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    current_schedule = "\n".join(config.work_time)
    current_status = "‚úÖ –í–∫–ª—é—á–µ–Ω–∞" if config.status_work_time == "on" else "‚õî –í—ã–∫–ª—é—á–µ–Ω–∞"
    # bot.send_message(message.chat.id, f"üïí –¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n{current_schedule}\n ")

    bot.send_message(
        message.chat.id,
        f"üïí –¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n{current_schedule}\n \nüîÑ *–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:* {current_status}\n\n",
        parse_mode="Markdown",
    )

    # –°–æ–∑–¥–∞–Ω–∏–µ inline-–∫–Ω–æ–ø–æ–∫
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("‚úÖ –î–∞", callback_data="change_time"),
        InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_time")
    )

    bot.send_message(message.chat.id, "–ñ–µ–ª–∞–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞–Ω–∏–π?", reply_markup=keyboard)

# ========= –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π "–î–∞" / "–ù–µ—Ç" =========
@bot.callback_query_handler(func=lambda call: call.data in ["change_time", "cancel_time"])
def process_time_change(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ)."""
    if not is_admin(call.from_user.id):
        bot.answer_callback_query(call.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∏–∑–º–µ–Ω—è—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.")
        return

    if call.data == "change_time":
        # –£–¥–∞–ª—è–µ–º inline-–∫–Ω–æ–ø–∫–∏, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è
        bot.send_message(call.message.chat.id, "‚è≥ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'HH:MM HH:MM HH:MM' (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):")
        bot.register_next_step_handler(call.message, update_schedule)

    elif call.data == "cancel_time":
        bot.edit_message_text("‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", call.message.chat.id, call.message.message_id)


# ========= –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ `work_time` =========
def update_schedule(message):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á –≤ `config.py` –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫."""
    if not is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∏–∑–º–µ–Ω—è—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.")
        return

    new_times = message.text.strip().split()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    corrected_times = []
    for time_value in new_times:
        match = re.match(r"^(\d{1,2}):(\d{2})$", time_value)
        if not match:
            bot.send_message(
                message.chat.id,
                "‚ö† –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'H:MM' –∏–ª–∏ 'HH:MM'.\n"
                "–ü—Ä–∏–º–µ—Ä: 9:30 –∏–ª–∏ 09:30\n"
                "–ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /set_time."
            )
            return

        hours, minutes = match.groups()
        hours = hours.zfill(2)  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–ª—å –ø–µ—Ä–µ–¥ –æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏
        corrected_times.append(f"{hours}:{minutes}")

    # **–ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º `work_time` –≤ config.py**
    config.work_time = corrected_times
    with open("config.py", "r", encoding="utf-8") as file:
        lines = file.readlines()

    for i, line in enumerate(lines):
        if line.startswith("work_time"):
            lines[i] = f"work_time = {corrected_times}\n"

    with open("config.py", "w", encoding="utf-8") as file:
        file.writelines(lines)

    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º config.py
    importlib.reload(config)

    current_status = "‚úÖ –í–∫–ª—é—á–µ–Ω–∞" if config.status_work_time == "on" else "‚õî –í—ã–∫–ª—é—á–µ–Ω–∞"

    bot.send_message(message.chat.id, f"‚úÖ –í—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–æ! –ù–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n" + "\n".join(config.work_time))
    bot.send_message(
        message.chat.id,
        f"üîÑ *–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:* {current_status}\n\n",
        parse_mode="Markdown",
    )

    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    restart_scheduler()


# ========= –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é =========
def send_control_panel_tasks():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö —Ç–µ–∫—Å—Ç –≤ task_data."""
    for performers, tasks_text in config.control_panel.items():
        for performer in performers:
            try:
                bot.send_message(performer, f"üìå *–í–∞—à–∏ –∑–∞–¥–∞—á–∏:*\n{tasks_text}", parse_mode="Markdown")
                bot.send_message(performer, "üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.")

                # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –≤ task_data
                task_data[performer] = {"task_text": tasks_text}

            except telebot.apihelper.ApiTelegramException as e:
                if "bot was blocked by the user" in str(e):
                    print(f"‚ö† –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {performer}.")
                else:
                    print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {performer}: {e}")

# ========= –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ =========
def restart_scheduler():
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å —É—á–µ—Ç–æ–º —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏."""
    importlib.reload(config)  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º config.py

    schedule.clear()

    if config.status_work_time == "off":
        print("‚õî –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞. –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∑–∞–ø—É—â–µ–Ω.")
        return  # –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏

    for work_time in config.work_time:
        schedule.every().day.at(work_time).do(send_control_panel_tasks)

    print(f"‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω! –ù–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {config.work_time}")


# ========= –§–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ =========
def schedule_jobs():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á, –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞."""
    while True:
        importlib.reload(config)  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

        if config.status_work_time == "on":
            schedule.run_pending()

        time.sleep(20)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 20 —Å–µ–∫—É–Ω–¥

schedule_thread = threading.Thread(target=schedule_jobs)
schedule_thread.daemon = True
schedule_thread.start()

@bot.message_handler(commands=['start'])
def handle_command_start(message: types.Message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–¥–∞—á")
    bot.send_message(
        message.chat.id,
        f'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{message.from_user.first_name}</b> ({message.from_user.username}):\n<pre>{message.from_user.id}</pre>',
        parse_mode="HTML"
    )

@bot.message_handler(commands=['help'])
def handle_command_help(message: types.Message):
    bot.send_message(message.chat.id, help_message.help_msg, parse_mode="HTML")


@bot.message_handler(commands=['admins'])
def handle_command_admins(message: types.Message):

    if not is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±–æ—Ç–∞."""
    admin_list = []

    for admin_id in config.ADMIN_ID:
        try:
            user = bot.get_chat(admin_id)
            username = f"üë§ @{user.username}" if user.username else f"ID: {admin_id}"
        except telebot.apihelper.ApiTelegramException:
            username = f"üë§ ID: {admin_id} (‚ùå –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)"

        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º username –∏ ID –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        admin_list.append(escape_markdown_v2(username))

    bot.send_message(
        chat_id=message.chat.id,
        text=f"üîπ *–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:*\n" + "\n".join(admin_list),
        parse_mode="MarkdownV2"
    )


@bot.message_handler(commands=['bot_users'])
def handle_bot_users(message):

    if not is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return


    """–í—ã–≤–æ–¥–∏—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –≥—Ä—É–ø–ø–∞–º."""

    importlib.reload(config)  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º config.py

    response = []

    for group_name, users in config.performers.items():
        user_list = []
        for user_id in users:
            try:
                user = bot.get_chat(user_id)
                username = f"@{user.username}" if user.username else f"ID: {user_id}"
                user_list.append(f"üë§ {username}")
            except telebot.apihelper.ApiTelegramException:
                user_list.append(f"‚ö† ID: {user_id} (–Ω–µ –Ω–∞–π–¥–µ–Ω)")

        if user_list:
            response.append(f"<b>{group_name}</b>:\n" + "\n".join(user_list))
        else:
            response.append(f"<b>{group_name}</b>:\n üîπ –ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")

    bot.send_message(message.chat.id, "\n\n".join(response), parse_mode="HTML")

@bot.message_handler(commands=['my_id'])
def handle_command_my_id(message: types.Message):
    bot.send_message(
        message.chat.id,
        f'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{message.from_user.first_name}</b> ({message.from_user.username}):\n<pre>{message.from_user.id}</pre>',
        parse_mode="HTML"
    )

@bot.message_handler(commands=['chat_id'])
def handle_command_chat_id(message: types.Message):
    bot.send_message(
        message.chat.id,
        f'ID —á–∞—Ç–∞:\n<pre>{message.chat.id}</pre>',
        parse_mode="HTML"
    )

# ========= –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–¥–∞—á–∞—Ö –∏ —Ñ–æ—Ç–æ =========
task_data = {}

# ========= –†—É—á–Ω–∞—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏ (–∞–¥–º–∏–Ω–æ–º) =========
@bot.message_handler(commands=['all_task'])
def new_task(message):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏."""
    if not message.from_user.id in config.ADMIN_ID:
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á–∏.")
        return

    bot.send_message(message.chat.id, "‚úè –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞):")
    bot.register_next_step_handler(message, send_task_to_performers, message.chat.id)


def send_task_to_performers(message, admin_chat_id):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏, –æ—Ç–º–µ–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É, –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ '–æ—Ç–º–µ–Ω–∞'."""
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        bot.send_message(admin_chat_id, "üö´ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫

    task_text = message.text  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è
    total_sent = 0  # –°—á–µ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

    for performers, tasks_text in config.control_panel.items():
        for performer in performers:
            try:
                bot.send_message(performer, f"üìå *–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ:*\n{task_text}", parse_mode="Markdown")
                bot.send_message(performer, "üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.")
                task_data[performer] = {"task_text": task_text}
                total_sent += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
            except telebot.apihelper.ApiTelegramException as e:
                if "bot was blocked by the user" in str(e):
                    print(f"‚ö† –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {performer}.")
                else:
                    print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {performer}: {e}")

    # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    if total_sent > 0:
        bot.send_message(admin_chat_id, f"‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {total_sent} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º!")
    else:
        bot.send_message(admin_chat_id, "‚ö† –ù–∏–∫–æ–º—É –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É.")


# ========= –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ –æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è =========
@bot.message_handler(content_types=['photo'])
def receive_photo(message):
    user_id = message.from_user.id
    if user_id not in sum(config.control_panel.keys(), ()):  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∏–∑ –æ–¥–Ω–æ–π –∏–∑ –≥—Ä—É–ø–ø
        bot.send_message(message.chat.id, "‚õî –í—ã –Ω–µ —á–∏—Å–ª–∏—Ç–µ—Å—å –≤ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π –ø–∞–Ω–µ–ª–∏.", parse_mode="HTML")
        return

    photo = message.photo[-1].file_id

    # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è; –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É.
    task_text = task_data.get(user_id, {}).get("task_text", "_")
    username = message.from_user.username or f"ID: {user_id}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π —á–∞—Ç –±–µ–∑ inline-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏—è
    sent_message = bot.send_photo(
        config.control_chat_id,
        photo,
        caption=f"üìù <b>–ó–∞–¥–∞—á–∞:</b> {task_text}\nüë§ <b>{username}</b>",
        parse_mode="HTML"
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "‚úÖ –ü—Ä–∏–Ω—è—Ç—å" –∏ "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å"
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{sent_message.message_id}_{user_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{sent_message.message_id}_{user_id}")
    )

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–º —á–∞—Ç–µ, –¥–æ–±–∞–≤–ª—è—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    bot.edit_message_reply_markup(chat_id=config.control_chat_id, message_id=sent_message.message_id, reply_markup=keyboard)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ task_data (–∫–ª—é—á ‚Äì ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–º —á–∞—Ç–µ)
    task_data[sent_message.message_id] = {
        "user_id": user_id,
        "user_message_id": message.message_id,
        "control_chat_id": config.control_chat_id,
        "task_text": task_text
    }

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    bot.send_message(message.chat.id, "‚úÖ <b>–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!</b>", parse_mode="HTML")

# ========= –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –≤ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–º —á–∞—Ç–µ =========
@bot.callback_query_handler(func=lambda call: call.data.startswith(("accept_", "reject_")))
def process_verification(call):
    admin_id = call.from_user.id
    if not admin_id in config.ADMIN_ID:
        bot.answer_callback_query(call.id, "‚õî –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ–¥–æ–±—Ä—è—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω—è—Ç—å —Ñ–æ—Ç–æ.")
        return
    action, control_msg_id, user_id = call.data.split("_")
    control_msg_id = int(control_msg_id)
    user_id = int(user_id)
    if control_msg_id not in task_data:
        bot.answer_callback_query(call.id, "‚ö† –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    stored = task_data[control_msg_id]
    try:
        bot.edit_message_reply_markup(chat_id=stored["control_chat_id"], message_id=control_msg_id, reply_markup=None)
    except telebot.apihelper.ApiTelegramException:
        bot.answer_callback_query(call.id, "‚ö† –û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –∏–∑–º–µ–Ω–µ–Ω–æ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–æ.")
        return
    if action == "accept":
        bot.send_message(
            user_id,
            "–§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ! –°–ø–∞—Å–∏–±–æ",
            reply_to_message_id=stored["user_message_id"],
            parse_mode="Markdown"
        )
        bot.answer_callback_query(call.id, "–§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ!")
        del task_data[control_msg_id]
    elif action == "reject":
        bot.send_message(
            user_id,
            "–§–æ—Ç–æ –Ω–µ –ø—Ä–∏–Ω—è—Ç–æ. –ü–µ—Ä–µ–¥–µ–ª–∞–π—Ç–µ!",
            reply_to_message_id=stored["user_message_id"],
            parse_mode="Markdown"
        )
        bot.answer_callback_query(call.id, "–§–æ—Ç–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ!")
        del task_data[control_msg_id]
        request_new_photo(user_id)

# ========= –ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ =========
def request_new_photo(user_id):
    bot.send_message(user_id, "üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.")

# ========= –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ =========
if __name__ == "__main__":
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.polling(none_stop=True)