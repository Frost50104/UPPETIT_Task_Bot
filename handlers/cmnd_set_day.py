
import re
import importlib
import config
from telebot.types import Message
from bot_instance import task_data

import schedule

def handle_cmnd_set_day(bot, is_admin, restart_scheduler):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã /set_day"""

    @bot.message_handler(commands=['set_day'])
    def handle_set_day(message):
        if not is_admin(message.from_user.id):
            bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∏–∑–º–µ–Ω—è—Ç—å –Ω–µ–¥–µ–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.")
            return

        # –ü–µ—Ä–µ–≤–æ–¥ —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
        day_translate_reverse = {
            "monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
            "tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
            "wednesday": "–°—Ä–µ–¥–∞",
            "thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
            "friday": "–ü—è—Ç–Ω–∏—Ü–∞",
            "saturday": "–°—É–±–±–æ—Ç–∞",
            "sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
        }

        current_schedule = "\n".join([
            f"{day_translate_reverse.get(day, day)} –≤ {time}"
            for day, time in config.weekly_schedule
        ])
        current_status = "‚úÖ –í–∫–ª—é—á–µ–Ω–∞" if config.status_weekly == "on" else "‚õî –í—ã–∫–ª—é—á–µ–Ω–∞"

        bot.send_message(
            message.chat.id,
            f"üìÖ <b>–¢–µ–∫—É—â–µ–µ –Ω–µ–¥–µ–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</b>\n{current_schedule}\n\n"
            f"üîÑ <b>–°—Ç–∞—Ç—É—Å:</b> {current_status}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <i>–¥–µ–Ω—å –≤—Ä–µ–º—è</i>, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
            f"<code>–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 10:00 —Å—Ä–µ–¥–∞ 15:30</code>",
            parse_mode="HTML"
        )

        bot.register_next_step_handler(message, update_weekly_schedule)

    def update_weekly_schedule(message):
        if not is_admin(message.from_user.id):
            bot.send_message(message.chat.id, "‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return

        parts = message.text.strip().split()
        if len(parts) % 2 != 0:
            bot.send_message(message.chat.id,
                             "‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /set_day –µ—â–µ —Ä–∞–∑ –∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–∞—Ä—ã: –¥–µ–Ω—å –∏ –≤—Ä–µ–º—è.")
            return

        # –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ä—É—Å—Å–∫–∏—Ö –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –¥–Ω–µ–π
        day_translation = {
            "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": "monday",
            "–≤—Ç–æ—Ä–Ω–∏–∫": "tuesday",
            "—Å—Ä–µ–¥–∞": "wednesday",
            "—á–µ—Ç–≤–µ—Ä–≥": "thursday",
            "–ø—è—Ç–Ω–∏—Ü–∞": "friday",
            "—Å—É–±–±–æ—Ç–∞": "saturday",
            "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": "sunday"
        }

        new_schedule = []
        for i in range(0, len(parts), 2):
            day_input = parts[i].lower()
            time_part = parts[i + 1]

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
            day = day_translation.get(day_input, day_input)
            if day not in ["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"]:
                bot.send_message(message.chat.id, f"‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {day_input}")
                return

            if not re.match(r"^\d{1,2}:\d{2}$", time_part):
                bot.send_message(message.chat.id, f"‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: {time_part}")
                return

            time_part = time_part.zfill(5)  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Ñ–æ—Ä–º–∞—Ç—É HH:MM
            new_schedule.append((day, time_part))

        # –û–±–Ω–æ–≤–ª—è–µ–º config.py
        with open("config.py", "r", encoding="utf-8") as f:
            lines = f.readlines()

        for i, line in enumerate(lines):
            if line.startswith("weekly_schedule"):
                lines[i] = f"weekly_schedule = {new_schedule}\n"

        with open("config.py", "w", encoding="utf-8") as f:
            f.writelines(lines)

        importlib.reload(config)
        bot.send_message(message.chat.id, "‚úÖ –ù–µ–¥–µ–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
        restart_scheduler()

    def send_weekly_tasks():
        for group_name, performers in config.performers_by_group.items():
            tasks_text = config.weekly_tasks.get(group_name)
            if not tasks_text:
                continue
            for performer in performers:
                try:
                    bot.send_message(performer, f"üìå <b>–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞:</b>\n{tasks_text}", parse_mode="HTML")
                    bot.send_message(performer, "üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.")
                    task_data[performer] = {"task_text": tasks_text}
                except Exception as e:
                    print(f"‚ö† –û—à–∏–±–∫–∞: {e}")

    # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
    if config.status_weekly == "on":
        for day, time_str in config.weekly_schedule:
            getattr(schedule.every(), day).at(time_str).do(send_weekly_tasks)