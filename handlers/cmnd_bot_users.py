import json
import importlib
from telebot.types import Message
import config
from users_cache import build_user_cache

def handle_cmnd_bot_users(bot, is_admin):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /bot_users"""

    @bot.message_handler(commands=['bot_users'])
    def handle_bot_users(message):
        if not is_admin(message.from_user.id):
            bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return

        # –®–∞–≥ 1 ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        loading_msg = bot.send_message(message.chat.id, "üîÅ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

        try:
            # –®–∞–≥ 2 ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            from users_cache import build_user_cache
            build_user_cache()

            # –®–∞–≥ 3 ‚Äî —á–∏—Ç–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –∫—ç—à
            with open("user_cache.json", "r", encoding="utf-8") as f:
                user_cache = json.load(f)

            importlib.reload(config)

            # –®–∞–≥ 4 ‚Äî —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            response = []

            for group_name, users in config.performers.items():
                user_list = []
                for user_id in users:
                    uid = str(user_id)
                    cached = user_cache.get(uid)
                    if cached:
                        first_name = cached.get("first_name") or "–ë–µ–∑ –∏–º–µ–Ω–∏"
                        username = f"@{cached['username']}" if cached.get("username") else f"ID: {uid}"
                        user_list.append(f"üë§ {first_name} ({username})")
                    else:
                        user_list.append(f"‚ö† ID: {uid} (–Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ)")

                if user_list:
                    response.append(f"<b>{group_name}</b>:\n" + "\n".join(user_list))
                else:
                    response.append(f"<b>{group_name}</b>:\n üîπ –ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")

            # –®–∞–≥ 5 ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –≤–ª–µ–∑–∞–µ—Ç
            full_text = "\n\n".join(response)
            max_length = 4096

            if len(full_text) <= max_length:
                bot.edit_message_text(full_text, message.chat.id, loading_msg.message_id, parse_mode="HTML")
            else:
                # –ï—Å–ª–∏ –¥–ª–∏–Ω–Ω–æ–µ ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
                bot.edit_message_text("‚úÖ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—É—á–µ–Ω.", message.chat.id, loading_msg.message_id)

                # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ —á–∞—Å—Ç—è–º
                while full_text:
                    part = full_text[:max_length]
                    split_index = part.rfind('\n\n')
                    if split_index == -1 or len(full_text) <= max_length:
                        bot.send_message(message.chat.id, full_text, parse_mode="HTML")
                        break
                    else:
                        part = full_text[:split_index]
                        bot.send_message(message.chat.id, part, parse_mode="HTML")
                        full_text = full_text[split_index:].lstrip()

        except Exception as e:
            bot.edit_message_text(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—ç—à–∞:\n<code>{e}</code>", message.chat.id,
                                  loading_msg.message_id, parse_mode="HTML")
