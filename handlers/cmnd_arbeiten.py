from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, Message, CallbackQuery
from task_storage import load_tasks, set_reminder_message_id

def handle_cmnd_arbeiten(bot, is_admin):
    @bot.message_handler(commands=["arbeiten"])
    def arbeiten_prompt(message: Message):
        if not is_admin(message.from_user.id):
            bot.reply_to(message, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", parse_mode="HTML")
            return

        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("‚úÖ –î–∞", callback_data="arbeiten_confirm"),
            InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="arbeiten_cancel")
        )

        bot.send_message(
            message.chat.id,
            "üî® –ü–Ω—É—Ç—å —Ç–µ—Ö, –∫—Ç–æ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ?",
            reply_markup=keyboard,
            parse_mode="HTML"
        )

    @bot.callback_query_handler(func=lambda call: call.data.startswith("arbeiten_"))
    def arbeiten_confirm_handler(call: CallbackQuery):
        if not is_admin(call.from_user.id):
            bot.answer_callback_query(call.id, "‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return

        if call.data == "arbeiten_cancel":
            bot.edit_message_text(
                "üòå –ü–∏–Ω–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                parse_mode="HTML"
            )
            bot.answer_callback_query(call.id)
            return

        if call.data == "arbeiten_confirm":
            tasks = load_tasks()

            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö, –∫–æ–≥–æ –Ω–∞–¥–æ –ø–Ω—É—Ç—å
            to_notify = []
            for uid, task_list in tasks.items():
                for task in task_list:
                    if task["status"] == "–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞":
                        to_notify.append((uid, task))

            if not to_notify:
                bot.edit_message_text(
                    "‚úÖ –í—Å–µ –º–æ–ª–æ–¥—Ü—ã, –≤—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!",
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    parse_mode="HTML"
                )
                bot.answer_callback_query(call.id)
                return

            # –ò–Ω–∞—á–µ ‚Äî –ø–∏–Ω–∞–µ–º
            bot.edit_message_text(
                "üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è–º!",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                parse_mode="HTML"
            )

            notified = 0

            for uid, task in to_notify:
                try:
                    uid_int = int(uid)

                    bot.send_message(
                        uid_int,
                        "‚ùó <b>–í–´ –ü–†–û–ò–ì–ù–û–†–ò–†–û–í–ê–õ–ò –ü–û–°–¢–ê–í–õ–ï–ù–ù–£–Æ –ó–ê–î–ê–ß–£, –û–î–£–ú–ê–ô–¢–ï–°–¨!</b>",
                        parse_mode="HTML"
                    )

                    msg = bot.send_message(
                        uid_int,
                        f"üìå <b>–ó–∞–¥–∞–Ω–∏–µ (–ø–æ–≤—Ç–æ—Ä–Ω–æ):</b>\n{task['task_text']}",
                        parse_mode="HTML"
                    )

                    set_reminder_message_id(uid_int, task["message_id"], msg.message_id)

                    notified += 1
                except Exception as e:
                    print(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∑–∞–¥–∞—á—É {uid}: {e}")

            bot.answer_callback_query(call.id, f"–ü–Ω—É—Ç—ã {notified} –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π.")