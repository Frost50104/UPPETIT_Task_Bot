# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–Ω–∞–¥—ã /delete_user
import importlib
import config
import re
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton


def handle_cmnd_delete_user(bot, is_admin, task_data):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã /delete_user"""
    # ========= –ö–æ–º–∞–Ω–¥–∞ /delete_user =========
    @bot.message_handler(commands=['delete_user'])
    def handle_delete_user(message):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞."""
        if not is_admin(message.from_user.id):
            bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —É–¥–∞–ª—è—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")
            return

        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_delete_user"),
            InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_delete_user")
        )

        bot.send_message(
            message.chat.id,
            "–•–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?",
            reply_markup=keyboard
        )

    @bot.callback_query_handler(func=lambda call: call.data in ["confirm_delete_user", "cancel_delete_user"])
    def process_delete_user_choice(call):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
        if not is_admin(call.from_user.id):
            bot.answer_callback_query(call.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —É–¥–∞–ª—è—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")
            return

        if call.data == "cancel_delete_user":
            bot.edit_message_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", call.message.chat.id, call.message.message_id)
            return

        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º config –ø–µ—Ä–µ–¥ –≤—ã–≤–æ–¥–æ–º —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø
        importlib.reload(config)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å –≤–º–µ—Å—Ç–æ –¥–ª–∏–Ω–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã
        group_index_map = {str(index): name for index, name in enumerate(config.performers.keys())}

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –∏ –∏–º–µ–Ω –≥—Ä—É–ø–ø (–≥–ª–æ–±–∞–ª—å–Ω–æ)
        task_data[call.message.chat.id] = {"group_index_map": group_index_map}

        keyboard = InlineKeyboardMarkup()
        for index, group_name in group_index_map.items():
            keyboard.add(InlineKeyboardButton(group_name[:30], callback_data=f"delete_group_{index}"))

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "‚ùå –û—Ç–º–µ–Ω–∞"
        keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete_employee_group"))

        bot.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É, –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=keyboard
        )

    @bot.callback_query_handler(func=lambda call: call.data == "cancel_delete_employee_group")
    def cancel_delete_employee(call):
        """–û—Ç–º–µ–Ω—è–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å."""
        bot.edit_message_text("üö´ –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", call.message.chat.id, call.message.message_id)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("delete_group_"))
    def select_group_to_delete(call):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞."""
        chat_id = call.message.chat.id
        group_index = call.data.split("_")[2]

        if chat_id not in task_data or "group_index_map" not in task_data[chat_id]:
            bot.send_message(chat_id, "‚ö† –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /delete_user.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ –∏–Ω–¥–µ–∫—Å—É
        group_name = task_data[chat_id]["group_index_map"].get(group_index)

        if not group_name:
            bot.send_message(chat_id, "‚ö† –û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
        task_data[chat_id]["selected_group"] = group_name

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        employee_list = config.performers[group_name]
        if not employee_list:
            bot.send_message(chat_id, f"‚ö† –í –≥—Ä—É–ø–ø–µ <b>{group_name}</b> –Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.", parse_mode="HTML")
            return

        keyboard = InlineKeyboardMarkup()
        for user_id in employee_list:
            try:
                user = bot.get_chat(user_id)
                username = f"@{user.username}" if user.username else "–ë–µ–∑ username"
                first_name = user.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
                display_text = f"üë§ {first_name} ({username})"
            except telebot.apihelper.ApiTelegramException:
                display_text = f"‚ùå ID: {user_id} (–Ω–µ –Ω–∞–π–¥–µ–Ω)"

            keyboard.add(InlineKeyboardButton(display_text, callback_data=f"delete_user_{user_id}"))

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "‚ùå –û—Ç–º–µ–Ω–∞"
        keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete_employee"))

        bot.edit_message_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ <b>{group_name}</b>:",
            chat_id,
            call.message.message_id,
            parse_mode="HTML",
            reply_markup=keyboard
        )

    @bot.callback_query_handler(func=lambda call: call.data == "cancel_delete_employee")
    def cancel_delete_employee(call):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤—ã–±–æ—Ä—É –≥—Ä—É–ø–ø—ã."""
        chat_id = call.message.chat.id

        if chat_id not in task_data or "group_index_map" not in task_data[chat_id]:
            bot.send_message(chat_id, "‚ö† –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /delete_user.")
            return

        group_index_map = task_data[chat_id]["group_index_map"]

        keyboard = InlineKeyboardMarkup()
        for index, group_name in group_index_map.items():
            keyboard.add(InlineKeyboardButton(group_name[:30], callback_data=f"delete_group_{index}"))

        bot.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É, –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:",
            chat_id,
            call.message.message_id,
            reply_markup=keyboard
        )

    @bot.callback_query_handler(func=lambda call: call.data.startswith("delete_user_"))
    def delete_employee(call):
        """–£–¥–∞–ª—è–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ –≥—Ä—É–ø–ø—ã."""
        chat_id = call.message.chat.id
        user_id = int(call.data.split("_")[2])

        if chat_id not in task_data or "selected_group" not in task_data[chat_id]:
            bot.send_message(chat_id, "‚ö† –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /delete_user.")
            return

        group_name = task_data[chat_id]["selected_group"]

        if group_name not in config.performers:
            bot.send_message(chat_id, "‚ö† –û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –£–±–∏—Ä–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏
        bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=None)

        # –ß–∏—Ç–∞–µ–º config.py
        config_file = "config.py"
        with open(config_file, "r", encoding="utf-8") as file:
            config_content = file.readlines()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏
        group_var_name = None
        for var_name, users in config.performers.items():
            if var_name == group_name:
                group_var_name = f"performers_list_{list(config.performers.keys()).index(var_name) + 1}"
                break

        if not group_var_name:
            bot.send_message(chat_id, f"‚ö† –û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ <b>{group_name}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ config.py", parse_mode="HTML")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        new_config_content = []
        group_updated = False

        for line in config_content:
            if line.strip().startswith(f"{group_var_name} ="):
                match = re.search(r"\((.*?)\)", line)
                if match:
                    existing_ids = match.group(1).strip()
                    existing_ids_list = [int(x.strip()) for x in existing_ids.split(",") if x.strip().isdigit()]
                else:
                    existing_ids_list = []

                if user_id not in existing_ids_list:
                    bot.send_message(chat_id, f"‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <b>{user_id}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥—Ä—É–ø–ø–µ {group_name}.",
                                     parse_mode="HTML")
                    return

                # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                existing_ids_list.remove(user_id)
                updated_ids = ", ".join(map(str, existing_ids_list))

                new_config_content.append(
                    f"{group_var_name} = ({updated_ids},)\n" if updated_ids else f"{group_var_name} = ()\n")

                group_updated = True
            else:
                new_config_content.append(line)

        if not group_updated:
            bot.send_message(chat_id, f"‚ö† –û—à–∏–±–∫–∞: —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã <b>{group_name}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ config.py",
                             parse_mode="HTML")
            return

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π config.py
        with open(config_file, "w", encoding="utf-8") as file:
            file.writelines(new_config_content)

        importlib.reload(config)

        bot.send_message(
            chat_id,
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <b>{user_id}</b> —É–¥–∞–ª–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã <b>{group_name}</b>!",
            parse_mode="HTML"
        )

        del task_data[chat_id]