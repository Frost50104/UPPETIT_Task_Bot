import importlib
import config
import json
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, Message

def handle_cmnd_set_task_group(bot, is_admin, task_data, daily_tasks, weekly_tasks, monthly_tasks):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã /set_task_group"""
    # ========= –ö–æ–º–∞–Ω–¥–∞ /set_task_group =========
    @bot.message_handler(commands=['set_task_group'])
    def handle_set_task_group(message):
        if not is_admin(message.from_user.id):
            bot.send_message(message.chat.id, "‚õî –ù–µ—Ç –ø—Ä–∞–≤.")
            return

        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è", callback_data="select_task_type_daily"),
            InlineKeyboardButton("üìÜ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è", callback_data="select_task_type_weekly"),
            InlineKeyboardButton("üóì –ï–∂–µ–º–µ—Å—è—á–Ω–∞—è", callback_data="select_task_type_monthly")
        )
        keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_task_group"))

        bot.send_message(
            message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ –≥—Ä—É–ø–ø–∞–º:",
            reply_markup=keyboard
        )

    @bot.callback_query_handler(func=lambda call: call.data.startswith("select_task_type_"))
    def handle_task_type_selection(call):
        task_type = call.data.replace("select_task_type_", "")  # daily / weekly / monthly
        bot.answer_callback_query(call.id)

        keyboard = InlineKeyboardMarkup(row_width=2)
        for i, group_name in enumerate(config.performers.keys(), start=1):
            callback_data = f"edit_task_group_{task_type}_{i}"  # –±–µ–∑–æ–ø–∞—Å–Ω–æ!
            keyboard.add(InlineKeyboardButton(group_name, callback_data=callback_data))

        keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_task_group"))

        bot.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ:",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=keyboard
        )

    @bot.callback_query_handler(func=lambda call: call.data.startswith("edit_task_group_"))
    def handle_group_selection(call):
        parts = call.data.split("_")  # ["edit", "task", "group", "daily", "1"]
        task_type = parts[3]
        group_number = parts[4]
        bot.answer_callback_query(call.id)

        group_names = list(config.performers.keys())
        group_name = group_names[int(group_number) - 1]  # –ù–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤—ã–≤–æ–¥–∞

        # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        bot.edit_message_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã <b>{group_name}</b>:",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            parse_mode="HTML"
        )

        bot.register_next_step_handler(
            call.message,
            lambda m, tt=task_type, gn=group_number: update_single_task(m, tt, gn)
        )

    def update_named_task(message, task_type, group_name):
        if not is_admin(message.from_user.id):
            bot.send_message(message.chat.id, "‚õî –ù–µ—Ç –ø—Ä–∞–≤.")
            return

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –≤ –∫–ª—é—á task_group_X
        group_index = list(config.performers.keys()).index(group_name) + 1
        key = f"task_group_{group_index}"

        block_name = {
            "daily": "daily_tasks",
            "weekly": "weekly_tasks",
            "monthly": "monthly_tasks"
        }[task_type]

        # –ó–∞–≥—Ä—É–∑–∏–º config.py
        with open("config.py", "r", encoding="utf-8") as f:
            lines = f.readlines()

        # –ù–∞–π–¥—ë–º –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ–º —Å–ª–æ–≤–∞—Ä—å
        current_dict = {}
        inside = False
        dict_text = ""
        for line in lines:
            if line.strip().startswith(f"{block_name}"):
                inside = True
                dict_text = line[line.find("=") + 1:].strip()
                continue
            if inside:
                if line.strip().startswith("#") or "=" in line:
                    break
                dict_text += line

        try:
            current_dict = eval(dict_text)
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–ª–æ–≤–∞—Ä—è: {e}")
            return

        current_dict[key] = message.text.strip()
        new_dict_text = json.dumps(current_dict, indent=4, ensure_ascii=False)

        # –ó–∞–º–µ–Ω—è–µ–º –≤ config.py
        new_lines = []
        skipping = False
        for line in lines:
            if line.strip().startswith(f"{block_name}"):
                new_lines.append(f"{block_name} = {new_dict_text}\n")
                skipping = True
                continue
            if skipping:
                if line.strip().startswith("}") or "=" in line or line.strip().startswith("#"):
                    skipping = False
                continue
            new_lines.append(line)

        with open("config.py", "w", encoding="utf-8") as f:
            f.writelines(new_lines)

        importlib.reload(config)
        bot.send_message(message.chat.id, "‚úÖ –ó–∞–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")

    def update_single_task(message, task_type, group_number):
        if not is_admin(message.from_user.id):
            bot.send_message(message.chat.id, "‚õî –ù–µ—Ç –ø—Ä–∞–≤.")
            return

        key = f"task_group_{group_number}"
        block_name = {
            "daily": "daily_tasks",
            "weekly": "weekly_tasks",
            "monthly": "monthly_tasks"
        }[task_type]

        with open("config.py", "r", encoding="utf-8") as f:
            lines = f.readlines()

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ª–æ–≤–∞—Ä—å
        current_dict = {}
        inside = False
        dict_text = ""
        for line in lines:
            if line.strip().startswith(f"{block_name}"):
                inside = True
                dict_text = line[line.find("=") + 1:].strip()
                continue
            if inside:
                if line.strip().startswith("#") or "=" in line:
                    break
                dict_text += line

        try:
            current_dict = eval(dict_text)
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ö† –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è: {e}")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª—é—á
        current_dict[key] = message.text.strip()
        formatted_dict = json.dumps(current_dict, indent=4, ensure_ascii=False)

        # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –±–ª–æ–∫ –≤ —Ñ–∞–π–ª–µ
        new_lines = []
        inside = False
        for line in lines:
            if line.strip().startswith(f"{block_name}"):
                inside = True
                new_lines.append(f"{block_name} = {formatted_dict}\n")
                continue
            if inside:
                if line.strip().startswith("}") or line.strip().startswith("#") or "=" in line:
                    inside = False
                continue
            new_lines.append(line)

        with open("config.py", "w", encoding="utf-8") as f:
            f.writelines(new_lines)

        importlib.reload(config)
        bot.send_message(message.chat.id, "‚úÖ –ó–∞–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")

    @bot.callback_query_handler(func=lambda call: call.data == "cancel_task_group")
    def cancel_task_group_edit(call):
        bot.answer_callback_query(call.id)
        bot.edit_message_text("‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", call.message.chat.id, call.message.message_id)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("edit_task"))
    def edit_task(call):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã."""
        _, chat_id, group_hash = call.data.split("|")
        chat_id = int(chat_id)

        if group_hash not in group_name_map:
            bot.answer_callback_query(call.id, "‚ö† –û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        group_name = group_name_map[group_hash]

        task_data[chat_id] = {"selected_group": group_name}

        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)

        bot.send_message(chat_id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã <b>{group_name}</b>:", parse_mode="HTML")
        bot.register_next_step_handler_by_chat_id(chat_id, update_task_text)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("cancel_set_tasks_group"))
    def cancel_set_tasks_group(call):
        """–û—Ç–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –≥—Ä—É–ø–ø."""
        chat_id = int(call.data.split("|")[1])

        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
        bot.send_message(chat_id, "üö´ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    def update_task_text(message):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –≤ config.py –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ control_panel_for_set_tasks_group."""
        chat_id = message.chat.id

        if chat_id not in task_data or "selected_group" not in task_data[chat_id]:
            bot.send_message(chat_id, "‚ö† –û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /set_tasks_group.")
            return

        new_task_text = message.text.strip()
        group_name = task_data[chat_id]["selected_group"]

        config_file = "config.py"
        with open(config_file, "r", encoding="utf-8") as file:
            config_content = file.readlines()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∑–∞–¥–∞–Ω–∏—è
        group_index = list(config.performers.keys()).index(group_name) + 1
        task_var_name = f"task_group_{group_index}"
        performers_key = f"performers_list_{group_index}"

        # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        new_config_content = []
        inside_task_block = False
        task_updated = False

        for line in config_content:
            if line.strip().startswith(f"{task_var_name} = '''") or line.strip().startswith(f'{task_var_name} = """'):
                # –ù–∞–π–¥–µ–Ω —Å—Ç–∞—Ä—ã–π –±–ª–æ–∫ –∑–∞–¥–∞—á–∏ ‚Äî –∑–∞–º–µ–Ω—è–µ–º –µ–≥–æ
                new_config_content.append(f"{task_var_name} = '''\n{new_task_text}\n'''\n")
                inside_task_block = True
                task_updated = True
                continue

            if inside_task_block:
                if line.strip().endswith("'''") or line.strip().endswith('"""'):
                    inside_task_block = False  # –ö–æ–Ω–µ—Ü —Å—Ç–∞—Ä–æ–≥–æ –±–ª–æ–∫–∞ –∑–∞–¥–∞—á–∏
                continue  # –ù–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å—Ç—Ä–æ–∫–∏ –∑–∞–¥–∞—á–∏

            new_config_content.append(line)  # –û—Å—Ç–∞–≤–ª—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

        if not task_updated:
            bot.send_message(chat_id, f"‚ö† –û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è {task_var_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ config.py")
            return

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π config.py
        with open(config_file, "w", encoding="utf-8") as file:
            file.writelines(new_config_content)

        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º config.py, —á—Ç–æ–±—ã –±–æ—Ç —Å—Ä–∞–∑—É –≤–∏–¥–µ–ª –∏–∑–º–µ–Ω–µ–Ω–∏—è
        importlib.reload(config)

        # –û–±–Ω–æ–≤–ª—è–µ–º `control_panel_for_set_tasks_group`
        config.control_panel_for_set_tasks_group[performers_key] = new_task_text

        bot.send_message(
            chat_id,
            f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã <b>{group_name}</b> —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
            parse_mode="HTML"
        )

        del task_data[chat_id]