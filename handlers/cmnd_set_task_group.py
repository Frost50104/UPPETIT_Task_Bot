import importlib
import config
import json
import hashlib
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, Message

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ö–µ—à–µ–π –≥—Ä—É–ø–ø
group_name_map = {}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ —Ö–µ—à–∞
def hash_name(name):
    return hashlib.md5(name.encode()).hexdigest()[:10]

def handle_cmnd_set_task_group(bot, is_admin, task_data, daily_tasks, weekly_tasks, monthly_tasks):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã /set_task_group"""
    # ========= –ö–æ–º–∞–Ω–¥–∞ /set_task_group =========
    @bot.message_handler(commands=['set_task_group'])
    def handle_set_task_group(message):
        if not is_admin(message.from_user.id):
            bot.send_message(message.chat.id, "‚õî –ù–µ—Ç –ø—Ä–∞–≤.")
            return

        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è", callback_data="select_task_type_daily"),
            InlineKeyboardButton("üìÜ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è", callback_data="select_task_type_weekly"),
            InlineKeyboardButton("üóì –ï–∂–µ–º–µ—Å—è—á–Ω–∞—è", callback_data="select_task_type_monthly")
        )
        keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_task_group"))

        bot.send_message(
            message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ –≥—Ä—É–ø–ø–∞–º:",
            reply_markup=keyboard
        )

    @bot.callback_query_handler(func=lambda call: call.data.startswith("select_task_type_"))
    def handle_task_type_selection(call):
        task_type = call.data.replace("select_task_type_", "")  # daily / weekly / monthly
        bot.answer_callback_query(call.id)

        # üîÑ –û–±–Ω–æ–≤–∏–º config (–≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–æ–ª—É—á–∏–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ)
        importlib.reload(config)

        # –í—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –∏–∑ config
        task_dict = {
            "daily": config.daily_tasks,
            "weekly": config.weekly_tasks,
            "monthly": config.monthly_tasks
        }[task_type]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ task_data
        cid = call.message.chat.id
        if cid not in task_data:
            task_data[cid] = {}
        task_data[cid]["task_type"] = task_type
        task_data[cid]["selected_groups"] = []

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
        current_task = "‚ùå –ù–µ—Ç –∑–∞–¥–∞–Ω–∏—è"
        for key, value in task_dict.items():
            if key.startswith("task_group_"):
                current_task = value
                break

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø, —É—á–∞—Å—Ç–≤—É—é—â–∏—Ö –≤ —Ä–∞—Å—Å—ã–ª–∫–µ
        participating_groups = []
        for i, group_name in enumerate(config.performers.keys(), start=1):
            key = f"task_group_{i}"
            if key in task_dict:
                participating_groups.append(group_name)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = f"<b>–¢–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è {task_type} —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n{current_task}\n\n"
        if participating_groups:
            message_text += "<b>–ì—Ä—É–ø–ø—ã, —É—á–∞—Å—Ç–≤—É—é—â–∏–µ –≤ —Ä–∞—Å—Å—ã–ª–∫–µ:</b>\n"
            for group in participating_groups:
                message_text += f"‚Ä¢ {group}\n"
        else:
            message_text += "<b>–ù–µ—Ç –≥—Ä—É–ø–ø, —É—á–∞—Å—Ç–≤—É—é—â–∏—Ö –≤ —Ä–∞—Å—Å—ã–ª–∫–µ</b>"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ì—Ä—É–ø–ø—ã" –∏ "–ó–∞–¥–∞—á–∞"
        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("üë• –ì—Ä—É–ø–ø—ã", callback_data=f"set_task_groups_{task_type}"),
            InlineKeyboardButton("üìù –ó–∞–¥–∞—á–∞", callback_data=f"set_task_text_{task_type}")
        )
        keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_task_group"))

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.edit_message_text(
            message_text,
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            parse_mode="HTML",
            reply_markup=keyboard
        )

    @bot.callback_query_handler(func=lambda call: call.data.startswith("set_task_groups_"))
    def handle_set_task_groups(call):
        task_type = call.data.replace("set_task_groups_", "")  # daily / weekly / monthly
        bot.answer_callback_query(call.id)
        cid = call.message.chat.id

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ task_data, –µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω
        if cid not in task_data:
            task_data[cid] = {}
        task_data[cid]["task_type"] = task_type
        if "selected_groups" not in task_data[cid]:
            task_data[cid]["selected_groups"] = []

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π:",
            chat_id=cid,
            message_id=call.message.message_id,
            reply_markup=None
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
        send_group_selection_buttons(cid, call.message.message_id)

    def send_group_selection_buttons(cid, message_id=None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ —Å –≥—Ä—É–ø–ø–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π"""
        importlib.reload(config)
        selected_groups = task_data[cid]["selected_groups"]

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥—Ä—É–ø–ø–∞–º–∏
        keyboard = InlineKeyboardMarkup(row_width=1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫–µ –∏–∑-–∑–∞ –≤–æ–∑–º–æ–∂–Ω–æ–π –¥–ª–∏–Ω—ã –Ω–∞–∑–≤–∞–Ω–∏–π

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã
        for group_name in config.performers:
            if group_name not in selected_groups:
                h = hash_name(group_name)
                group_name_map[h] = group_name
                keyboard.add(InlineKeyboardButton(group_name, callback_data=f"select_group|{h}"))

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ"
        keyboard.add(InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ", callback_data="finish_group_selection"))

        # –ï—Å–ª–∏ –µ—Å—Ç—å ID —Å–æ–æ–±—â–µ–Ω–∏—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        if message_id:
            bot.edit_message_reply_markup(
                chat_id=cid,
                message_id=message_id,
                reply_markup=keyboard
            )
        else:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –≥—Ä—É–ø–ø–∞–º–∏
            if selected_groups:
                text = "–í—ã–±—Ä–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã:\n"
                for group in selected_groups:
                    text += f"‚Ä¢ {group}\n"
                text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –µ—â–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ':"
            else:
                text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π:"

            bot.send_message(
                cid,
                text,
                reply_markup=keyboard
            )

    @bot.callback_query_handler(func=lambda call: call.data.startswith("select_group|"))
    def handle_group_selection(call):
        _, group_hash = call.data.split("|")
        cid = call.message.chat.id
        bot.answer_callback_query(call.id)

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ —Ö–µ—à—É
        group_name = group_name_map.get(group_hash)
        if not group_name:
            bot.send_message(cid, "‚ö†Ô∏è –û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
        if cid in task_data and "selected_groups" in task_data[cid]:
            if group_name not in task_data[cid]["selected_groups"]:
                task_data[cid]["selected_groups"].append(group_name)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        send_group_selection_buttons(cid, call.message.message_id)

    @bot.callback_query_handler(func=lambda call: call.data == "finish_group_selection")
    def handle_finish_group_selection(call):
        cid = call.message.chat.id
        bot.answer_callback_query(call.id)

        if cid not in task_data or "task_type" not in task_data[cid]:
            bot.send_message(cid, "‚ö†Ô∏è –û—à–∏–±–∫–∞: —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω")
            return

        task_type = task_data[cid]["task_type"]
        selected_groups = task_data[cid].get("selected_groups", [])

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –≥—Ä—É–ø–ø–∞–º–∏
        if selected_groups:
            message_text = f"<b>–í—ã–±—Ä–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã –¥–ª—è {task_type} —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n"
            for group in selected_groups:
                message_text += f"‚Ä¢ {group}\n"
        else:
            message_text = f"<b>–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã –¥–ª—è {task_type} —Ä–∞—Å—Å—ã–ª–∫–∏</b>"

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É
        task_dict = {
            "daily": config.daily_tasks,
            "weekly": config.weekly_tasks,
            "monthly": config.monthly_tasks
        }[task_type]

        current_task = "‚ùå –ù–µ—Ç –∑–∞–¥–∞–Ω–∏—è"
        for key, value in task_dict.items():
            if key.startswith("task_group_"):
                current_task = value
                break

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–ª–æ–∫ –∑–∞–¥–∞—á –≤ config.py
        block_name = {
            "daily": "daily_tasks",
            "weekly": "weekly_tasks",
            "monthly": "monthly_tasks"
        }[task_type]

        # –ó–∞–≥—Ä—É–∂–∞–µ–º config.py
        with open("config.py", "r", encoding="utf-8") as f:
            lines = f.readlines()

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ª–æ–≤–∞—Ä—å –∑–∞–¥–∞—á
        current_dict = {}
        inside = False
        dict_text = ""
        for line in lines:
            if line.strip().startswith(f"{block_name}"):
                inside = True
                dict_text = line[line.find("=") + 1:].strip()
                continue
            if inside:
                if line.strip().startswith("#") or "=" in line:
                    break
                dict_text += line

        try:
            current_dict = eval(dict_text)
        except Exception as e:
            bot.send_message(cid, f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–ª–æ–≤–∞—Ä—è: {e}")
            return

        # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ None –¥–ª—è –≤—Å–µ—Ö task_group_X)
        for i in range(1, len(config.performers.keys()) + 1):
            key = f"task_group_{i}"
            if key in current_dict:
                current_dict[key] = None

        # –ó–∞—Ç–µ–º —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø
        for group_name in selected_groups:
            try:
                group_index = list(config.performers.keys()).index(group_name) + 1
                key = f"task_group_{group_index}"
                current_dict[key] = current_task
            except ValueError:
                bot.send_message(cid, f"‚ö† –û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ {group_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                continue

        # –£–¥–∞–ª—è–µ–º None –∑–Ω–∞—á–µ–Ω–∏—è
        keys_to_remove = [k for k, v in current_dict.items() if v is None]
        for key in keys_to_remove:
            del current_dict[key]

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
        new_dict_text = json.dumps(current_dict, indent=4, ensure_ascii=False)

        # –ó–∞–º–µ–Ω—è–µ–º –≤ config.py
        new_lines = []
        skipping = False
        for line in lines:
            if line.strip().startswith(f"{block_name}"):
                new_lines.append(f"{block_name} = {new_dict_text}\n")
                skipping = True
                continue
            if skipping:
                if line.strip().startswith("}") or "=" in line or line.strip().startswith("#"):
                    skipping = False
                continue
            new_lines.append(line)

        with open("config.py", "w", encoding="utf-8") as f:
            f.writelines(new_lines)

        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º config.py
        importlib.reload(config)

        message_text += f"\n\n<b>–¢–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞:</b>\n{current_task}"
        message_text += f"\n\n‚úÖ –°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!"

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        bot.edit_message_text(
            message_text,
            chat_id=cid,
            message_id=call.message.message_id,
            parse_mode="HTML"
        )

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        if cid in task_data:
            del task_data[cid]



    @bot.callback_query_handler(func=lambda call: call.data == "cancel_task_group")
    def cancel_task_group_edit(call):
        bot.answer_callback_query(call.id)
        bot.edit_message_text("‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", call.message.chat.id, call.message.message_id)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("set_task_text_"))
    def handle_set_task_text(call):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ä–∞—Å—Å—ã–ª–∫–∏."""
        task_type = call.data.replace("set_task_text_", "")  # daily / weekly / monthly
        cid = call.message.chat.id
        bot.answer_callback_query(call.id)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ task_data, –µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω
        if cid not in task_data:
            task_data[cid] = {}
        task_data[cid]["task_type"] = task_type

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:",
            chat_id=cid,
            message_id=call.message.message_id,
            reply_markup=None
        )

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        bot.register_next_step_handler_by_chat_id(cid, handle_new_task_text)


    def handle_new_task_text(message):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø –≤ config.py."""
        chat_id = message.chat.id

        if chat_id not in task_data or "task_type" not in task_data[chat_id]:
            bot.send_message(chat_id, "‚ö† –û—à–∏–±–∫–∞: —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /set_task_group.")
            return

        new_task_text = message.text.strip()
        task_type = task_data[chat_id]["task_type"]
        selected_groups = task_data[chat_id].get("selected_groups", [])

        # –ï—Å–ª–∏ –≥—Ä—É–ø–ø—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –≥—Ä—É–ø–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ —É—á–∞—Å—Ç–≤—É—é—Ç –≤ —Ä–∞—Å—Å—ã–ª–∫–µ
        if not selected_groups:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–ª–æ–∫ –∑–∞–¥–∞—á –≤ config.py
            block_name = {
                "daily": "daily_tasks",
                "weekly": "weekly_tasks",
                "monthly": "monthly_tasks"
            }[task_type]

            # –ó–∞–≥—Ä—É–∂–∞–µ–º config.py
            with open("config.py", "r", encoding="utf-8") as f:
                lines = f.readlines()

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ª–æ–≤–∞—Ä—å –∑–∞–¥–∞—á
            current_dict = {}
            inside = False
            dict_text = ""
            for line in lines:
                if line.strip().startswith(f"{block_name}"):
                    inside = True
                    dict_text = line[line.find("=") + 1:].strip()
                    continue
                if inside:
                    if line.strip().startswith("#") or "=" in line:
                        break
                    dict_text += line

            try:
                current_dict = eval(dict_text)
            except Exception as e:
                bot.send_message(chat_id, f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–ª–æ–≤–∞—Ä—è: {e}")
                return

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø, —É—á–∞—Å—Ç–≤—É—é—â–∏—Ö –≤ —Ä–∞—Å—Å—ã–ª–∫–µ
            participating_groups = []
            for i, group_name in enumerate(config.performers.keys(), start=1):
                key = f"task_group_{i}"
                if key in current_dict:
                    participating_groups.append(group_name)

            selected_groups = participating_groups

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–ª–æ–∫ –∑–∞–¥–∞—á –≤ config.py
        block_name = {
            "daily": "daily_tasks",
            "weekly": "weekly_tasks",
            "monthly": "monthly_tasks"
        }[task_type]

        # –ó–∞–≥—Ä—É–∂–∞–µ–º config.py
        with open("config.py", "r", encoding="utf-8") as f:
            lines = f.readlines()

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ª–æ–≤–∞—Ä—å –∑–∞–¥–∞—á
        current_dict = {}
        inside = False
        dict_text = ""
        for line in lines:
            if line.strip().startswith(f"{block_name}"):
                inside = True
                dict_text = line[line.find("=") + 1:].strip()
                continue
            if inside:
                if line.strip().startswith("#") or "=" in line:
                    break
                dict_text += line

        try:
            current_dict = eval(dict_text)
        except Exception as e:
            bot.send_message(chat_id, f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–ª–æ–≤–∞—Ä—è: {e}")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø
        for group_name in selected_groups:
            group_index = list(config.performers.keys()).index(group_name) + 1
            key = f"task_group_{group_index}"
            current_dict[key] = new_task_text

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
        new_dict_text = json.dumps(current_dict, indent=4, ensure_ascii=False)

        # –ó–∞–º–µ–Ω—è–µ–º –≤ config.py
        new_lines = []
        skipping = False
        for line in lines:
            if line.strip().startswith(f"{block_name}"):
                new_lines.append(f"{block_name} = {new_dict_text}\n")
                skipping = True
                continue
            if skipping:
                if line.strip().startswith("}") or "=" in line or line.strip().startswith("#"):
                    skipping = False
                continue
            new_lines.append(line)

        with open("config.py", "w", encoding="utf-8") as f:
            f.writelines(new_lines)

        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º config.py
        importlib.reload(config)

        # –û–±–Ω–æ–≤–ª—è–µ–º control_panel_for_set_tasks_group –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø
        for group_name in selected_groups:
            group_index = list(config.performers.keys()).index(group_name) + 1
            performers_key = f"performers_list_{group_index}"
            config.control_panel_for_set_tasks_group[performers_key] = new_task_text

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        if len(selected_groups) == 1:
            success_message = f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã <b>{selected_groups[0]}</b> —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!"
        else:
            success_message = f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –¥–ª—è <b>{len(selected_groups)} –≥—Ä—É–ø–ø</b> —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!"

        bot.send_message(
            chat_id,
            success_message,
            parse_mode="HTML"
        )

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        del task_data[chat_id]
