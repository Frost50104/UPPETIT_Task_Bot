# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–Ω–∞–¥—ã /add_user
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import re
import importlib
import config
from bot_instance import bot, is_admin, task_data


def handle_cmnd_add_user(bot, is_admin, task_data):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã /add_user"""
    # ========= –ö–æ–º–∞–Ω–¥–∞ /add_user =========
    @bot.message_handler(commands=['add_user'])
    def handle_add_user(message):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞."""
        if not is_admin(message.from_user.id):
            bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")
            return

        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_add_user"),
            InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_add_user")
        )

        bot.send_message(
            message.chat.id,
            "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?",
            parse_mode="HTML",
            reply_markup=keyboard
        )


    @bot.callback_query_handler(func=lambda call: call.data in ["confirm_add_user", "cancel_add_user"])
    def process_add_user_choice(call):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–¥–æ–±–∞–≤–ª—è—Ç—å –∏–ª–∏ –Ω–µ—Ç)."""
        if not is_admin(call.from_user.id):
            bot.answer_callback_query(call.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∏–∑–º–µ–Ω—è—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")
            return

        if call.data == "cancel_add_user":
            bot.edit_message_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", call.message.chat.id, call.message.message_id)
            return

        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º config –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∫–Ω–æ–ø–æ–∫
        importlib.reload(config)

        keyboard = InlineKeyboardMarkup()
        group_index_map = {str(index): group for index, group in enumerate(config.performers.keys())}

        for index, group_name in group_index_map.items():
            keyboard.add(InlineKeyboardButton(group_name[:30], callback_data=f"select_group_{index}"))

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞" –ø–æ–¥ –≤—Å–µ–º–∏ –≥—Ä—É–ø–ø–∞–º–∏
        keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_group_selection"))

        bot.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É, –≤ –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=keyboard
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –∏ –Ω–∞–∑–≤–∞–Ω–∏–π –≥—Ä—É–ø–ø
        task_data[call.message.chat.id] = {"group_index_map": group_index_map}


    @bot.callback_query_handler(func=lambda call: call.data.startswith("select_group_"))
    def select_group(call):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç ID –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã."""
        chat_id = call.message.chat.id
        group_index = call.data.split("_")[2]

        if chat_id not in task_data or "group_index_map" not in task_data[chat_id]:
            bot.send_message(chat_id, "‚ö† –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_user.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ –∏–Ω–¥–µ–∫—Å—É
        group_name = task_data[chat_id]["group_index_map"].get(group_index)

        if not group_name:
            bot.send_message(chat_id, "‚ö† –û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
        task_data[chat_id]["selected_group"] = group_name

        bot.edit_message_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É <b>{group_name}</b>\n\n–£–∫–∞–∂–∏—Ç–µ ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:",
            chat_id,
            call.message.message_id,
            parse_mode="HTML"
        )

        bot.register_next_step_handler_by_chat_id(chat_id, process_new_user_id)


    def process_new_user_id(message):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ config.py."""
        chat_id = message.chat.id

        if chat_id not in task_data or "selected_group" not in task_data[chat_id]:
            bot.send_message(chat_id, "‚ö† –û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_user.")
            return

        try:
            new_user_id = int(message.text.strip())
        except ValueError:
            bot.send_message(chat_id, "‚ö† –û—à–∏–±–∫–∞: ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", parse_mode="HTML")
            return

        group_name = task_data[chat_id]["selected_group"]

        # üîÑ –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
        loading_msg = bot.send_message(chat_id, "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...", parse_mode="HTML")

        # –ß–∏—Ç–∞–µ–º config.py
        config_file = "config.py"
        with open(config_file, "r", encoding="utf-8") as file:
            config_content = file.readlines()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å –∫–æ—Ä—Ç–µ–∂–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        group_var_name = None
        for var_name in config.performers.keys():
            if var_name == group_name:
                group_var_name = f"performers_list_{list(config.performers.keys()).index(var_name) + 1}"
                break

        if not group_var_name:
            bot.send_message(chat_id, f"‚ö† –û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ <b>{group_name}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ config.py", parse_mode="HTML")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        new_config_content = []
        group_updated = False

        for line in config_content:
            if line.strip().startswith(f"{group_var_name} ="):
                match = re.search(r"\((.*?)\)", line)
                if match:
                    existing_ids = match.group(1).strip()
                    existing_ids_list = [int(x.strip()) for x in existing_ids.split(",") if x.strip().isdigit()]
                else:
                    existing_ids_list = []

                if new_user_id in existing_ids_list:
                    try:
                        user_info = bot.get_chat(new_user_id)
                        user_name = user_info.first_name
                    except Exception:
                        user_name = f"ID {new_user_id}"
                    bot.send_message(chat_id, f"‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{user_name}</b> —É–∂–µ –≤ –≥—Ä—É–ø–ø–µ {group_name}.",
                                     parse_mode="HTML")
                    return

                existing_ids_list.append(new_user_id)
                updated_ids = ", ".join(map(str, existing_ids_list))

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ñ–∞–π–ª–µ
                new_config_content.append(f"{group_var_name} = ({updated_ids},)\n")
                group_updated = True
            else:
                new_config_content.append(line)

        if not group_updated:
            bot.send_message(chat_id, f"‚ö† –û—à–∏–±–∫–∞: —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã <b>{group_name}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ config.py", parse_mode="HTML")
            return

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π config.py
        with open(config_file, "w", encoding="utf-8") as file:
            file.writelines(new_config_content)

        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º config.py
        importlib.reload(config)

        # üîÅ –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        from users_cache import build_user_cache
        build_user_cache()

        try:
            user_info = bot.get_chat(new_user_id)
            user_name = user_info.first_name
        except Exception:
            user_name = f"ID {new_user_id}"

        bot.edit_message_text(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{user_name}</b> –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É <b>{group_name}</b>!\n\n‚úÖ –ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∞.",
            chat_id=chat_id,
            message_id=loading_msg.message_id,
            parse_mode="HTML"
        )

        del task_data[chat_id]

    @bot.callback_query_handler(func=lambda call: call.data == "cancel_group_selection")
    def cancel_group_selection(call):
        if not is_admin(call.from_user.id):
            bot.answer_callback_query(call.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
            return

        bot.edit_message_text(
            "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            parse_mode="HTML"
        )

        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
        task_data.pop(call.message.chat.id, None)

        bot.answer_callback_query(call.id)