import re
import importlib
import config
from bot_instance import task_data
import restart_scheduler
from telebot.types import Message


def handle_cmnd_set_month(bot, is_admin, restart_scheduler):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã /set_month"""

    @bot.message_handler(commands=['set_month'])
    def handle_set_month(message):
        if not is_admin(message.from_user.id):
            bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∏–∑–º–µ–Ω—è—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.")
            return

        current_schedule = "\n".join([f"{day}-–≥–æ —á–∏—Å–ª–∞ –≤ {time}" for day, time in config.monthly_schedule])
        current_status = "‚úÖ –í–∫–ª—é—á–µ–Ω–∞" if config.status_monthly == "on" else "‚õî –í—ã–∫–ª—é—á–µ–Ω–∞"

        bot.send_message(
            message.chat.id,
            f"üìÖ <b>–¢–µ–∫—É—â–µ–µ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</b>\n{current_schedule}\n\n"
            f"üîÑ <b>–°—Ç–∞—Ç—É—Å:</b> {current_status}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <i>—á–∏—Å–ª–æ –≤—Ä–µ–º—è</i>, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
            f"<code>1 10:00 15 18:30</code>",
            parse_mode="HTML"
        )

        bot.register_next_step_handler(message, update_monthly_schedule)

    def update_monthly_schedule(message):
        if not is_admin(message.from_user.id):
            bot.send_message(message.chat.id, "‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return

        parts = message.text.strip().split()
        if len(parts) % 2 != 0:
            bot.send_message(message.chat.id, "‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä—ã: —á–∏—Å–ª–æ –∏ –≤—Ä–µ–º—è.")
            return

        new_schedule = []
        for i in range(0, len(parts), 2):
            try:
                day = int(parts[i])
                time_part = parts[i + 1]
            except ValueError:
                bot.send_message(message.chat.id, f"‚ö† –ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ: {parts[i]}")
                return

            if not (1 <= day <= 31):
                bot.send_message(message.chat.id, f"‚ö† –î–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 31: {day}")
                return

            if not re.match(r"^\d{1,2}:\d{2}$", time_part):
                bot.send_message(message.chat.id, f"‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: {time_part}")
                return

            time_part = time_part.zfill(5)
            new_schedule.append((day, time_part))

        with open("config.py", "r", encoding="utf-8") as f:
            lines = f.readlines()

        for i, line in enumerate(lines):
            if line.startswith("monthly_schedule"):
                lines[i] = f"monthly_schedule = {new_schedule}\n"

        with open("config.py", "w", encoding="utf-8") as f:
            f.writelines(lines)

        importlib.reload(config)
        bot.send_message(message.chat.id, "‚úÖ –ï–∂–µ–º–µ—Å—è—á–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
        restart_scheduler()

    def send_monthly_tasks():
        for group_name, performers in config.performers_by_group.items():
            tasks_text = config.monthly_tasks.get(group_name)
            if not tasks_text:
                continue
            for performer in performers:
                try:
                    bot.send_message(performer, f"üìå <b>–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –∑–∞–¥–∞—á–∞:</b>\n{tasks_text}", parse_mode="HTML")
                    bot.send_message(performer, "üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.")
                    task_data[performer] = {"task_text": tasks_text}
                except Exception as e:
                    print(f"‚ö† –û—à–∏–±–∫–∞: {e}")
