
import hashlib
import importlib
import config
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, Message

group_name_map = {}

def handle_cmnd_group_task(bot, is_admin, task_data):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã /group_task"""

    # ========= –ö–æ–º–∞–Ω–¥–∞ /group_task =========
    @bot.message_handler(commands=['group_task'])
    def handle_group_task(message):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏."""
        if not is_admin(message.from_user.id):
            bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á–∏.")
            return

        bot.send_message(message.chat.id, "‚úè –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞):")
        bot.register_next_step_handler(message, process_group_task_text)

    def process_group_task_text(message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤."""
        if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
            bot.send_message(message.chat.id, "üö´ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            return

        task_text = message.text.strip()
        chat_id = message.chat.id

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–¥–∞—á–µ
        task_data[chat_id] = {"task_text": task_text, "selected_groups": []}

        send_group_selection(chat_id)

    def hash_group_name(group_name):
        """–°–æ–∑–¥–∞—ë—Ç –∫–æ—Ä–æ—Ç–∫–∏–π —Ö–µ—à –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ callback_data."""
        return hashlib.md5(group_name.encode()).hexdigest()[:8]  # 8 —Å–∏–º–≤–æ–ª–æ–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏

    group_name_map = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ö–µ—à–∞ –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è

    def send_group_selection(chat_id):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –¥–ª—è –≤—ã–±–æ—Ä–∞."""
        importlib.reload(config)  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ

        selected_groups = task_data[chat_id]["selected_groups"]
        available_groups = [group for group in config.performers.keys() if group not in selected_groups]

        keyboard = InlineKeyboardMarkup()

        if not available_groups:
            bot.send_message(
                chat_id,
                "–ë–æ–ª—å—à–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø",
                parse_mode="HTML"
            )
            send_selected_groups(chat_id)
            return

        for group_name in available_groups:
            group_hash = hash_group_name(group_name)
            group_name_map[group_hash] = group_name  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
            callback_data = f"group_task_select|{chat_id}|{group_hash}"
            keyboard.add(InlineKeyboardButton(group_name, callback_data=callback_data))

        keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"group_task_cancel|{chat_id}"))

        bot.send_message(
            chat_id,
            "–ö–æ–º—É –Ω—É–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É?",
            parse_mode="HTML",
            reply_markup=keyboard
        )

    @bot.callback_query_handler(func=lambda call: call.data.startswith("group_task_select"))
    def select_group(call):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –≥—Ä—É–ø–ø—É –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –µ—â–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å."""
        _, chat_id, group_hash = call.data.split("|")
        chat_id = int(chat_id)

        if chat_id not in task_data:
            bot.answer_callback_query(call.id, "‚ö† –û—à–∏–±–∫–∞: –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        group_name = group_name_map.get(group_hash)
        if not group_name:
            bot.answer_callback_query(call.id, "‚ö† –û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        if group_name not in task_data[chat_id]["selected_groups"]:
            task_data[chat_id]["selected_groups"].append(group_name)

        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
        send_selected_groups(chat_id)

    def send_selected_groups(chat_id):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –≥—Ä—É–ø–ø–∞–º–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å."""
        selected_groups = task_data[chat_id]["selected_groups"]
        selected_text = "\n".join([f"‚úÖ <b>{group}</b>" for group in selected_groups])

        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", callback_data=f"group_task_add_more|{chat_id}"),
            InlineKeyboardButton("üì® –û–¢–ü–†–ê–í–ò–¢–¨", callback_data=f"group_task_send|{chat_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"group_task_cancel|{chat_id}")
        )

        bot.send_message(
            chat_id,
            f"–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω—É –≥—Ä—É–ø–ø—É –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É?\n\n<b>–í—ã–±—Ä–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã:</b>\n{selected_text}",
            parse_mode="HTML",
            reply_markup=keyboard
        )

    @bot.callback_query_handler(func=lambda call: call.data.startswith("group_task_add_more"))
    def add_more_groups(call):
        """–ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å –µ—â—ë –≥—Ä—É–ø–ø—ã."""
        chat_id = int(call.data.split("|")[1])
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
        send_group_selection(chat_id)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("group_task_send"))
    def send_group_task(call):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≥—Ä—É–ø–ø–∞–º."""
        chat_id = int(call.data.split("|")[1])

        if chat_id not in task_data or not task_data[chat_id]["selected_groups"]:
            bot.answer_callback_query(call.id, "‚ö† –û—à–∏–±–∫–∞: –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø.")
            return

        task_text = task_data[chat_id]["task_text"]
        group_names = task_data[chat_id]["selected_groups"]
        user_ids = []

        for group_name in group_names:
            user_ids.extend(config.performers.get(group_name, []))

        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)

        for user_id in user_ids:
            try:
                bot.send_message(user_id, f"üìå <b>–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ:</b>\n{task_text}", parse_mode="HTML")
                bot.send_message(user_id, "üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.")
                task_data[user_id] = {"task_text": task_text}
            except telebot.apihelper.ApiTelegramException as e:
                print(f"‚ö† –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        bot.send_message(chat_id, "‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø!")
        del task_data[chat_id]

    @bot.callback_query_handler(func=lambda call: call.data.startswith("group_task_cancel"))
    def cancel_task(call):
        """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏."""
        chat_id = int(call.data.split("|")[1])
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
        bot.send_message(chat_id, "üö´ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        if chat_id in task_data:
            del task_data[chat_id]